
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 30 18:12:39 CDT 2016
//----------------------------------------------------

package autogen;

import lab7.*;
import lab8.*;
import java_cup.runtime.*;
import java.util.Vector;
import java.util.Enumeration;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 30 18:12:39 CDT 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\215\000\002\002\004\000\002\002\003\000\002\072" +
    "\003\000\002\072\004\000\002\073\003\000\002\074\006" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\004\000\002\076\004\000\002\076\004\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\103" +
    "\003\000\002\103\005\000\002\075\005\000\002\075\004" +
    "\000\002\077\003\000\002\077\004\000\002\100\004\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\003\005\000\002\105\003\000\002\104" +
    "\003\000\002\104\003\000\002\101\003\000\002\101\005" +
    "\000\002\004\006\000\002\005\006\000\002\005\005\000" +
    "\002\006\003\000\002\006\005\000\002\007\004\000\002" +
    "\066\003\000\002\070\003\000\002\067\003\000\002\071" +
    "\003\000\002\010\003\000\002\011\005\000\002\012\004" +
    "\000\002\013\005\000\002\013\004\000\002\014\003\000" +
    "\002\014\004\000\002\015\003\000\002\015\003\000\002" +
    "\016\005\000\002\016\003\000\002\102\003\000\002\102" +
    "\005\000\002\017\003\000\002\017\004\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\003\000\002\021\003\000\002\022\011\000\002" +
    "\022\007\000\002\023\007\000\002\062\005\000\002\062" +
    "\004\000\002\024\003\000\002\024\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\005\000\002\031" +
    "\006\000\002\031\005\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\005\000\002" +
    "\035\007\000\002\035\006\000\002\036\003\000\002\061" +
    "\003\000\002\057\003\000\002\057\005\000\002\060\003" +
    "\000\002\060\003\000\002\056\003\000\002\056\007\000" +
    "\002\055\003\000\002\055\005\000\002\054\003\000\002" +
    "\054\005\000\002\053\003\000\002\053\005\000\002\052" +
    "\003\000\002\052\005\000\002\051\003\000\002\051\005" +
    "\000\002\050\003\000\002\050\005\000\002\050\005\000" +
    "\002\047\003\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\046" +
    "\003\000\002\045\003\000\002\045\005\000\002\045\005" +
    "\000\002\044\003\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\043\003\000\002\043\006\000\002" +
    "\043\006\000\002\037\003\000\002\037\004\000\002\042" +
    "\003\000\002\042\003\000\002\040\003\000\002\040\004" +
    "\000\002\041\003\000\002\041\003\000\002\063\003\000" +
    "\002\064\003\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\010\026\012\027\010\031\006\001\002\000" +
    "\004\002\333\001\002\000\012\002\ufffd\026\ufffd\027\ufffd" +
    "\031\ufffd\001\002\000\012\020\ufff9\026\ufff9\027\ufff9\031" +
    "\ufff9\001\002\000\012\020\016\026\020\027\017\031\015" +
    "\001\002\000\022\017\ufffb\020\ufffb\023\ufffb\026\ufffb\027" +
    "\ufffb\031\ufffb\034\ufffb\061\ufffb\001\002\000\012\002\000" +
    "\026\012\027\010\031\006\001\002\000\022\017\ufffa\020" +
    "\ufffa\023\ufffa\026\ufffa\027\ufffa\031\ufffa\034\ufffa\061\ufffa" +
    "\001\002\000\012\002\uffff\026\uffff\027\uffff\031\uffff\001" +
    "\002\000\012\002\ufffe\026\ufffe\027\ufffe\031\ufffe\001\002" +
    "\000\022\017\ufff6\020\ufff6\023\ufff6\026\ufff6\027\ufff6\031" +
    "\ufff6\034\ufff6\061\ufff6\001\002\000\004\061\021\001\002" +
    "\000\022\017\ufff8\020\ufff8\023\ufff8\026\ufff8\027\ufff8\031" +
    "\ufff8\034\ufff8\061\ufff8\001\002\000\022\017\ufff7\020\ufff7" +
    "\023\ufff7\026\ufff7\027\ufff7\031\ufff7\034\ufff7\061\ufff7\001" +
    "\002\000\072\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77" +
    "\011\uff77\012\uff77\013\uff77\014\uff77\015\uff77\036\uff77\037" +
    "\uff77\040\uff77\041\uff77\043\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055" +
    "\uff77\056\uff77\057\uff77\061\uff77\001\002\000\004\041\023" +
    "\001\002\000\012\026\012\027\010\031\025\042\034\001" +
    "\002\000\064\002\ufffc\016\ufffc\017\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\037\ufffc\041\ufffc\042\ufffc" +
    "\046\ufffc\053\ufffc\054\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\001\002\000\024\017\ufff9\020\ufff9\023\ufff9\026\ufff9" +
    "\027\ufff9\031\ufff9\034\ufff9\041\051\061\ufff9\001\002\000" +
    "\012\026\uffea\027\uffea\031\uffea\042\uffea\001\002\000\012" +
    "\026\uffe8\027\uffe8\031\uffe8\042\uffe8\001\002\000\012\026" +
    "\uffe9\027\uffe9\031\uffe9\042\uffe9\001\002\000\012\026\012" +
    "\027\010\031\025\042\330\001\002\000\004\046\327\001" +
    "\002\000\012\026\uffeb\027\uffeb\031\uffeb\042\uffeb\001\002" +
    "\000\064\002\uffef\016\uffef\017\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\037\uffef\041\uffef\042\uffef\046" +
    "\uffef\053\uffef\054\uffef\060\uffef\061\uffef\062\uffef\063\uffef" +
    "\001\002\000\012\026\uffee\027\uffee\031\uffee\042\uffee\001" +
    "\002\000\022\017\043\020\016\023\037\026\020\027\017" +
    "\031\015\034\044\061\021\001\002\000\050\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\037\ufff4\040\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\057\ufff4\061\ufff4\001\002\000\004" +
    "\037\315\001\002\000\004\061\021\001\002\000\052\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\037\uffe4\040\uffe4\044\157\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\057\uffe4\061\uffe4" +
    "\001\002\000\050\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\037\ufff5" +
    "\040\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\057" +
    "\ufff5\061\ufff5\001\002\000\050\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\037\ufff3\040\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\057\ufff3\061\ufff3\001\002\000\010\037\uffda\044" +
    "\ufff2\061\ufff2\001\002\000\046\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\040\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\057\uffe6\061\uffe6\001\002\000\050\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\037\uffe5\040\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\057\uffe5\061\uffe5\001\002\000\004\041\051" +
    "\001\002\000\062\016\067\017\043\022\101\023\037\024" +
    "\112\025\113\026\012\027\010\030\105\031\006\032\111" +
    "\033\102\034\044\035\133\037\062\041\051\042\135\046" +
    "\071\053\057\054\061\060\075\061\021\062\125\063\146" +
    "\001\002\000\012\026\uffd6\027\uffd6\031\uffd6\042\uffd6\001" +
    "\002\000\020\012\170\013\uff9d\040\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\057\uff9d\001\002\000\024\012\uff99\013\uff99\015" +
    "\174\040\uff99\045\uff99\046\uff99\047\uff99\050\uff99\057\uff99" +
    "\001\002\000\062\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010" +
    "\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\036\uff7f" +
    "\040\uff7f\043\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f" +
    "\001\002\000\066\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\001\002\000\032\016\uff7d\024\uff7d\025" +
    "\uff7d\032\uff7d\033\uff7d\037\uff7d\053\uff7d\054\uff7d\060\uff7d" +
    "\061\uff7d\062\uff7d\063\uff7d\001\002\000\066\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\036\uffb3\037\uffb3\040\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002\000" +
    "\032\016\uff7c\024\uff7c\025\uff7c\032\uff7c\033\uff7c\037\uff7c" +
    "\053\uff7c\054\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\001" +
    "\002\000\040\016\067\017\043\023\037\024\112\025\113" +
    "\032\111\033\102\034\044\037\062\053\057\054\061\060" +
    "\075\061\021\062\125\063\146\001\002\000\066\004\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\036\uffbb\037\uffad\040\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\001\002" +
    "\000\004\046\275\001\002\000\004\061\021\001\002\000" +
    "\064\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\036\uffba\040\uffba\043" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\001" +
    "\002\000\032\016\uff78\024\uff78\025\uff78\032\uff78\033\uff78" +
    "\037\uff78\053\uff78\054\uff78\060\uff78\061\uff78\062\uff78\063" +
    "\uff78\001\002\000\056\004\uff86\005\uff86\006\uff86\007\uff86" +
    "\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\040" +
    "\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\001\002\000" +
    "\064\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\037\uffc4\041\uffc4\042\uffc4\046\uffc4" +
    "\053\uffc4\054\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\001" +
    "\002\000\062\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\036\263\040" +
    "\uff82\043\264\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82" +
    "\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\001" +
    "\002\000\050\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\040\uff8a\045" +
    "\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\053\257\054\260" +
    "\057\uff8a\001\002\000\026\012\uff97\013\uff97\015\uff97\040" +
    "\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\176\057\uff97" +
    "\001\002\000\032\016\uff79\024\uff79\025\uff79\032\uff79\033" +
    "\uff79\037\uff79\053\uff79\054\uff79\060\uff79\061\uff79\062\uff79" +
    "\063\uff79\001\002\000\064\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\036\uffbc\040\uffbc\043\uffbc\044\255\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\001\002\000\022\012\uff9b\013\uff9b\040" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\050\172\057\uff9b\001\002" +
    "\000\062\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\036\uffa5\040\uffa5" +
    "\043\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001\002" +
    "\000\004\037\247\001\002\000\066\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\036\uffac\037\uffac\040\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\001\002\000\066\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\036\uffb5\037\uffb5\040\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\001" +
    "\002\000\032\016\067\024\112\025\113\032\111\033\102" +
    "\037\243\053\057\054\061\060\075\061\021\062\125\063" +
    "\146\001\002\000\034\016\067\024\112\025\113\032\111" +
    "\033\102\037\062\046\240\053\057\054\061\060\075\061" +
    "\021\062\125\063\146\001\002\000\062\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\036\uffbd\037\uffae\043\uffbd\044\157\046\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\061\uffe4\001\002\000\064\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\036\uffb9\040\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\001\002\000\056\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013" +
    "\uff89\014\uff89\015\uff89\040\uff89\045\uff89\046\uff89\047\uff89" +
    "\050\uff89\051\uff89\052\234\053\uff89\054\uff89\055\232\056" +
    "\233\057\uff89\001\002\000\066\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\001\002\000\012\017\043" +
    "\023\037\034\044\061\021\001\002\000\066\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\036\uffab\037\uffab\040\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\001\002\000" +
    "\012\040\uffa3\045\uffa3\046\uffa3\047\uffa3\001\002\000\012" +
    "\040\uffa4\045\uffa4\046\uffa4\047\uffa4\001\002\000\032\006" +
    "\201\007\200\012\uff95\013\uff95\015\uff95\040\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\057\uff95\001\002\000" +
    "\064\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\037\uffc6\041\uffc6\042\uffc6\046\uffc6" +
    "\053\uffc6\054\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\001" +
    "\002\000\070\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\061\ufff2\001\002\000\044\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\040\uff90\045\uff90\046\uff90\047\uff90\050\uff90" +
    "\051\uff90\057\uff90\001\002\000\062\016\uffd2\017\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2\041" +
    "\uffd2\042\uffd2\046\uffd2\053\uffd2\054\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\001\002\000\062\016\uffcd\017\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\041" +
    "\uffcd\042\uffcd\046\uffcd\053\uffcd\054\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\001\002\000\066\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\036\uffb7\037\uffaf\040\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002\000\066\004" +
    "\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76" +
    "\013\uff76\014\uff76\015\uff76\036\uff76\037\uff76\040\uff76\043" +
    "\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76" +
    "\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\001" +
    "\002\000\064\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\037\uffca\041\uffca\042\uffca" +
    "\046\uffca\053\uffca\054\uffca\060\uffca\061\uffca\062\uffca\063" +
    "\uffca\001\002\000\062\016\067\017\043\022\101\023\037" +
    "\024\112\025\113\026\012\027\010\030\105\031\006\032" +
    "\111\033\102\034\044\035\133\037\062\041\051\042\224" +
    "\046\071\053\057\054\061\060\075\061\021\062\125\063" +
    "\146\001\002\000\004\037\214\001\002\000\066\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\036\uffb4\037\uffb4\040\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002" +
    "\000\062\016\uffd0\017\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\037\uffd0\041\uffd0\042\uffd0\046\uffd0\053" +
    "\uffd0\054\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\001\002" +
    "\000\004\037\210\001\002\000\064\016\uffc8\017\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037" +
    "\uffc8\041\uffc8\042\uffc8\046\uffc8\053\uffc8\054\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\001\002\000\064\016\uffd3\017" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\037\uffd3\041\uffd3\042\uffd3\046\uffd3\053\uffd3\054\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\001\002\000\062\016" +
    "\uffcf\017\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\037\uffcf\041\uffcf\042\uffcf\046\uffcf\053\uffcf\054\uffcf" +
    "\060\uffcf\061\uffcf\062\uffcf\063\uffcf\001\002\000\004\046" +
    "\uffc3\001\002\000\032\016\067\024\112\025\113\032\111" +
    "\033\102\037\062\053\057\054\061\060\075\061\021\062" +
    "\125\063\146\001\002\000\016\013\166\040\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\057\165\001\002\000\044\004\150\005" +
    "\147\006\uff93\007\uff93\010\153\011\152\012\uff93\013\uff93" +
    "\014\151\015\uff93\040\uff93\045\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\057\uff93\001\002\000\064\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\037\uffc7\041\uffc7\042\uffc7\046\uffc7\053\uffc7\054\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002\000\062\004\uff7b" +
    "\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013" +
    "\uff7b\014\uff7b\015\uff7b\036\uff7b\040\uff7b\043\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\055\uff7b\056\uff7b\057\uff7b\001\002\000\064\016\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\037\uffc5\041\uffc5\042\uffc5\046\uffc5\053\uffc5\054" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000\066" +
    "\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012" +
    "\uff75\013\uff75\014\uff75\015\uff75\036\uff75\037\uff75\040\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75" +
    "\001\002\000\032\016\067\024\112\025\113\032\111\033" +
    "\102\037\062\053\057\054\061\060\075\061\021\062\125" +
    "\063\146\001\002\000\032\016\067\024\112\025\113\032" +
    "\111\033\102\037\062\053\057\054\061\060\075\061\021" +
    "\062\125\063\146\001\002\000\012\017\043\023\037\034" +
    "\044\061\021\001\002\000\032\016\067\024\112\025\113" +
    "\032\111\033\102\037\062\053\057\054\061\060\075\061" +
    "\021\062\125\063\146\001\002\000\032\016\067\024\112" +
    "\025\113\032\111\033\102\037\062\053\057\054\061\060" +
    "\075\061\021\062\125\063\146\001\002\000\066\004\uffbd" +
    "\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\036\uffbd\037\uffae\040\uffbd\043\uffbd" +
    "\044\157\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\001\002" +
    "\000\044\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\040\uff8f\045\uff8f" +
    "\046\uff8f\047\uff8f\050\uff8f\051\uff8f\057\uff8f\001\002\000" +
    "\062\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82" +
    "\012\uff82\013\uff82\014\uff82\015\uff82\036\uff82\040\uff82\043" +
    "\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\001\002\000" +
    "\004\061\021\001\002\000\070\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\061\ufff1\001\002\000\044" +
    "\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\040\uff8e\045\uff8e\046\uff8e" +
    "\047\uff8e\050\uff8e\051\uff8e\057\uff8e\001\002\000\044\004" +
    "\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\014\uff8b\015\uff8b\040\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\057\uff8b\001\002\000\044\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\040\uff8c\045\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\057\uff8c\001\002\000\044\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\040\uff8d\045\uff8d\046\uff8d\047\uff8d\050" +
    "\uff8d\051\uff8d\057\uff8d\001\002\000\032\016\067\024\112" +
    "\025\113\032\111\033\102\037\062\053\057\054\061\060" +
    "\075\061\021\062\125\063\146\001\002\000\032\016\067" +
    "\024\112\025\113\032\111\033\102\037\062\053\057\054" +
    "\061\060\075\061\021\062\125\063\146\001\002\000\020" +
    "\012\170\013\uff9c\040\uff9c\045\uff9c\046\uff9c\047\uff9c\057" +
    "\uff9c\001\002\000\032\016\067\024\112\025\113\032\111" +
    "\033\102\037\062\053\057\054\061\060\075\061\021\062" +
    "\125\063\146\001\002\000\022\012\uff9a\013\uff9a\040\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\172\057\uff9a\001\002\000" +
    "\032\016\067\024\112\025\113\032\111\033\102\037\062" +
    "\053\057\054\061\060\075\061\021\062\125\063\146\001" +
    "\002\000\024\012\uff98\013\uff98\015\174\040\uff98\045\uff98" +
    "\046\uff98\047\uff98\050\uff98\057\uff98\001\002\000\032\016" +
    "\067\024\112\025\113\032\111\033\102\037\062\053\057" +
    "\054\061\060\075\061\021\062\125\063\146\001\002\000" +
    "\026\012\uff96\013\uff96\015\uff96\040\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\176\057\uff96\001\002\000\032\016" +
    "\067\024\112\025\113\032\111\033\102\037\062\053\057" +
    "\054\061\060\075\061\021\062\125\063\146\001\002\000" +
    "\032\006\201\007\200\012\uff94\013\uff94\015\uff94\040\uff94" +
    "\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\057\uff94\001" +
    "\002\000\032\016\067\024\112\025\113\032\111\033\102" +
    "\037\062\053\057\054\061\060\075\061\021\062\125\063" +
    "\146\001\002\000\032\016\067\024\112\025\113\032\111" +
    "\033\102\037\062\053\057\054\061\060\075\061\021\062" +
    "\125\063\146\001\002\000\044\004\150\005\147\006\uff92" +
    "\007\uff92\010\153\011\152\012\uff92\013\uff92\014\151\015" +
    "\uff92\040\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92" +
    "\057\uff92\001\002\000\044\004\150\005\147\006\uff91\007" +
    "\uff91\010\153\011\152\012\uff91\013\uff91\014\151\015\uff91" +
    "\040\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\057" +
    "\uff91\001\002\000\004\045\205\001\002\000\032\016\067" +
    "\024\112\025\113\032\111\033\102\037\062\053\057\054" +
    "\061\060\075\061\021\062\125\063\146\001\002\000\012" +
    "\040\uff9e\045\uff9e\046\uff9e\047\uff9e\001\002\000\062\004" +
    "\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e" +
    "\013\uff7e\014\uff7e\015\uff7e\036\uff7e\040\uff7e\043\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\054\uff7e\055\uff7e\056\uff7e\057\uff7e\001\002\000\032\016" +
    "\067\024\112\025\113\032\111\033\102\037\062\053\057" +
    "\054\061\060\075\061\021\062\125\063\146\001\002\000" +
    "\004\040\212\001\002\000\044\016\067\022\101\024\112" +
    "\025\113\030\105\032\111\033\102\035\133\037\062\041" +
    "\051\046\071\053\057\054\061\060\075\061\021\062\125" +
    "\063\146\001\002\000\064\016\uffc0\017\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0\041" +
    "\uffc0\042\uffc0\046\uffc0\053\uffc0\054\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\001\002\000\034\016\067\024\112\025" +
    "\113\032\111\033\102\037\062\040\216\053\057\054\061" +
    "\060\075\061\021\062\125\063\146\001\002\000\006\040" +
    "\221\047\220\001\002\000\066\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\001\002\000\006\040\uffa9" +
    "\047\uffa9\001\002\000\032\016\067\024\112\025\113\032" +
    "\111\033\102\037\062\053\057\054\061\060\075\061\021" +
    "\062\125\063\146\001\002\000\066\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\036\uffb1\037\uffb1\040\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\057\uffb1\001\002\000\006\040" +
    "\uffa8\047\uffa8\001\002\000\062\016\uffd1\017\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\041\uffd1" +
    "\042\uffd1\046\uffd1\053\uffd1\054\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\001\002\000\064\016\uffd4\017\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4" +
    "\041\uffd4\042\uffd4\046\uffd4\053\uffd4\054\uffd4\060\uffd4\061" +
    "\uffd4\062\uffd4\063\uffd4\001\002\000\004\037\226\001\002" +
    "\000\034\016\067\024\112\025\113\032\111\033\102\037" +
    "\062\040\230\053\057\054\061\060\075\061\021\062\125" +
    "\063\146\001\002\000\006\040\231\047\220\001\002\000" +
    "\064\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\036\uffa6\040\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\001" +
    "\002\000\064\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\036\uffa7\040" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\001\002\000\032\016\067\024\112\025\113\032\111" +
    "\033\102\037\062\053\057\054\061\060\075\061\021\062" +
    "\125\063\146\001\002\000\032\016\067\024\112\025\113" +
    "\032\111\033\102\037\062\053\057\054\061\060\075\061" +
    "\021\062\125\063\146\001\002\000\032\016\067\024\112" +
    "\025\113\032\111\033\102\037\062\053\057\054\061\060" +
    "\075\061\021\062\125\063\146\001\002\000\056\004\uff85" +
    "\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013" +
    "\uff85\014\uff85\015\uff85\040\uff85\045\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\057\uff85\001\002\000\056\004\uff83\005\uff83\006\uff83" +
    "\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015" +
    "\uff83\040\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83" +
    "\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\001" +
    "\002\000\056\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\040\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84" +
    "\054\uff84\055\uff84\056\uff84\057\uff84\001\002\000\064\016" +
    "\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\037\uffbe\041\uffbe\042\uffbe\046\uffbe\053\uffbe" +
    "\054\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\001\002\000" +
    "\004\046\242\001\002\000\064\016\uffbf\017\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\037\uffbf" +
    "\041\uffbf\042\uffbf\046\uffbf\053\uffbf\054\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\001\002\000\032\016\067\024\112" +
    "\025\113\032\111\033\102\037\062\053\057\054\061\060" +
    "\075\061\021\062\125\063\146\001\002\000\062\004\uff7a" +
    "\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013" +
    "\uff7a\014\uff7a\015\uff7a\036\uff7a\040\uff7a\043\uff7a\045\uff7a" +
    "\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054" +
    "\uff7a\055\uff7a\056\uff7a\057\uff7a\001\002\000\004\040\246" +
    "\001\002\000\064\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\036\uffb8" +
    "\040\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\001\002\000\032\016\067\024\112\025\113\032" +
    "\111\033\102\037\062\053\057\054\061\060\075\061\021" +
    "\062\125\063\146\001\002\000\004\040\251\001\002\000" +
    "\044\016\067\022\101\024\112\025\113\030\105\032\111" +
    "\033\102\035\133\037\062\041\051\046\071\053\057\054" +
    "\061\060\075\061\021\062\125\063\146\001\002\000\064" +
    "\016\uffc1\017\uffc1\021\253\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\037\uffc1\041\uffc1\042\uffc1\046\uffc1\053" +
    "\uffc1\054\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\001\002" +
    "\000\044\016\067\022\101\024\112\025\113\030\105\032" +
    "\111\033\102\035\133\037\062\041\051\046\071\053\057" +
    "\054\061\060\075\061\021\062\125\063\146\001\002\000" +
    "\064\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\037\uffc2\041\uffc2\042\uffc2\046\uffc2" +
    "\053\uffc2\054\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\001" +
    "\002\000\004\061\021\001\002\000\066\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\036\uffb2\037\uffb2\040\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\001\002\000\032" +
    "\016\067\024\112\025\113\032\111\033\102\037\062\053" +
    "\057\054\061\060\075\061\021\062\125\063\146\001\002" +
    "\000\032\016\067\024\112\025\113\032\111\033\102\037" +
    "\062\053\057\054\061\060\075\061\021\062\125\063\146" +
    "\001\002\000\056\004\uff87\005\uff87\006\uff87\007\uff87\010" +
    "\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\040\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\234\053" +
    "\uff87\054\uff87\055\232\056\233\057\uff87\001\002\000\056" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\040\uff88\045\uff88\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\234\053\uff88\054\uff88\055" +
    "\232\056\233\057\uff88\001\002\000\032\016\uffa0\024\uffa0" +
    "\025\uffa0\032\uffa0\033\uffa0\037\uffa0\053\uffa0\054\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\001\002\000\032\016\uffa1" +
    "\024\uffa1\025\uffa1\032\uffa1\033\uffa1\037\uffa1\053\uffa1\054" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\001\002\000\032" +
    "\016\067\024\112\025\113\032\111\033\102\037\062\053" +
    "\057\054\061\060\075\061\021\062\125\063\146\001\002" +
    "\000\012\040\uffa2\045\uffa2\046\uffa2\047\uffa2\001\002\000" +
    "\006\046\273\047\272\001\002\000\006\046\uffcc\047\uffcc" +
    "\001\002\000\006\046\uffd8\047\uffd8\001\002\000\004\061" +
    "\021\001\002\000\062\016\uffce\017\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\037\uffce\041\uffce\042\uffce" +
    "\046\uffce\053\uffce\054\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\001\002\000\006\046\uffcb\047\uffcb\001\002\000\064" +
    "\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\037\uffc9\041\uffc9\042\uffc9\046\uffc9\053" +
    "\uffc9\054\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\001\002" +
    "\000\004\040\302\001\002\000\004\040\300\001\002\000" +
    "\110\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\067\024\112\025" +
    "\113\032\111\033\102\036\uffb8\037\243\040\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\075" +
    "\061\021\062\125\063\146\001\002\000\062\004\uff80\005" +
    "\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80" +
    "\014\uff80\015\uff80\036\uff80\040\uff80\043\uff80\045\uff80\046" +
    "\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80" +
    "\055\uff80\056\uff80\057\uff80\001\002\000\032\016\067\024" +
    "\112\025\113\032\111\033\102\037\062\053\057\054\061" +
    "\060\075\061\021\062\125\063\146\001\002\000\062\004" +
    "\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81" +
    "\013\uff81\014\uff81\015\uff81\036\uff81\040\uff81\043\uff81\045" +
    "\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\057\uff81\001\002\000\006\046" +
    "\uffe7\047\312\001\002\000\004\041\051\001\002\000\006" +
    "\046\uffe3\047\uffe3\001\002\000\010\037\uffda\046\uffd9\047" +
    "\uffd9\001\002\000\012\026\uffd7\027\uffd7\031\uffd7\042\uffd7" +
    "\001\002\000\012\026\uffe1\027\uffe1\031\uffe1\042\uffe1\001" +
    "\002\000\004\061\021\001\002\000\006\046\uffe2\047\uffe2" +
    "\001\002\000\006\046\uffd9\047\uffd9\001\002\000\014\017" +
    "\043\023\037\034\044\040\320\061\021\001\002\000\004" +
    "\061\021\001\002\000\006\040\323\047\322\001\002\000" +
    "\004\041\uffdf\001\002\000\006\040\uffde\047\uffde\001\002" +
    "\000\012\017\043\023\037\034\044\061\021\001\002\000" +
    "\004\041\uffe0\001\002\000\006\040\uffdd\047\uffdd\001\002" +
    "\000\006\040\uffdc\047\uffdc\001\002\000\006\040\uffdb\047" +
    "\uffdb\001\002\000\012\026\uffec\027\uffec\031\uffec\042\uffec" +
    "\001\002\000\064\002\ufff0\016\ufff0\017\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\041\ufff0\042" +
    "\ufff0\046\ufff0\053\ufff0\054\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\001\002\000\012\026\uffed\027\uffed\031\uffed\042" +
    "\uffed\001\002\000\012\026\uffd5\027\uffd5\031\uffd5\042\uffd5" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\014\002\003\072\010\073\012\074\004\076" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\073" +
    "\013\074\004\076\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\023\001\001\000\022\003\031\004" +
    "\032\011\025\012\027\074\026\076\035\077\030\100\034" +
    "\001\001\000\002\001\001\000\004\013\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\031\004\032\011\025\012\027\074\026\076\035\100" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\047\063\044\070" +
    "\037\103\041\104\045\105\040\106\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\304\063\306\067" +
    "\305\070\037\101\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\051\001\001\000\140" +
    "\013\144\014\126\015\121\016\131\017\135\020\125\021" +
    "\063\022\133\023\142\024\077\025\075\026\106\027\123" +
    "\030\130\031\057\032\127\033\062\035\065\036\143\037" +
    "\071\040\054\041\103\042\137\043\067\044\107\045\072" +
    "\046\120\047\141\050\115\051\073\052\053\053\076\054" +
    "\052\055\140\056\113\057\114\061\136\062\116\063\117" +
    "\064\055\065\102\074\122\076\006\103\105\104\045\105" +
    "\064\106\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\104" +
    "\024\077\025\075\026\106\027\123\030\130\031\057\032" +
    "\127\033\062\035\065\036\143\037\071\040\054\041\103" +
    "\042\137\043\067\044\107\045\072\046\120\047\141\050" +
    "\115\051\073\052\053\053\076\054\052\055\140\056\113" +
    "\057\114\061\276\063\117\064\055\065\102\103\153\106" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\063\270\071\267\102\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\024\077\025\075\026\106\027\123\030\130" +
    "\031\057\032\127\033\062\035\065\036\143\037\243\040" +
    "\054\041\103\042\137\063\117\064\055\065\102\103\153" +
    "\001\001\000\102\024\077\025\075\026\106\027\123\030" +
    "\130\031\057\032\127\033\062\035\065\036\143\037\071" +
    "\040\054\041\103\042\137\043\067\044\107\045\072\046" +
    "\120\047\141\050\115\051\073\052\053\053\076\054\052" +
    "\055\140\056\113\057\114\061\240\063\117\064\055\065" +
    "\102\103\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\063\117\103" +
    "\041\104\224\106\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\136\013\144\015\222\016\131\017\135" +
    "\020\125\021\063\022\133\023\142\024\077\025\075\026" +
    "\106\027\123\030\130\031\057\032\127\033\062\035\065" +
    "\036\143\037\071\040\054\041\103\042\137\043\067\044" +
    "\107\045\072\046\120\047\141\050\115\051\073\052\053" +
    "\053\076\054\052\055\140\056\113\057\114\061\136\062" +
    "\116\063\117\064\055\065\102\074\122\076\006\103\105" +
    "\104\045\105\064\106\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\024\077\025\075\026\106\027\123\030\130" +
    "\031\057\032\127\033\062\035\065\036\143\037\155\040" +
    "\054\041\103\042\137\043\206\063\117\064\055\065\102" +
    "\103\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\024\077\025\075\026\106\027\123\030" +
    "\130\031\057\032\127\033\062\035\065\036\143\037\155" +
    "\040\054\041\103\042\137\043\067\044\107\045\072\046" +
    "\163\063\117\064\055\065\102\103\153\001\001\000\056" +
    "\024\077\025\075\026\106\027\123\030\130\031\057\032" +
    "\127\033\062\035\065\036\143\037\155\040\054\041\103" +
    "\042\137\043\067\044\107\045\072\046\162\063\117\064" +
    "\055\065\102\103\153\001\001\000\014\063\117\103\041" +
    "\104\045\105\161\106\046\001\001\000\056\024\077\025" +
    "\075\026\106\027\123\030\130\031\057\032\127\033\062" +
    "\035\065\036\143\037\155\040\054\041\103\042\137\043" +
    "\067\044\107\045\072\046\160\063\117\064\055\065\102" +
    "\103\153\001\001\000\056\024\077\025\075\026\106\027" +
    "\123\030\130\031\057\032\127\033\062\035\065\036\143" +
    "\037\155\040\054\041\103\042\137\043\067\044\107\045" +
    "\072\046\154\063\117\064\055\065\102\103\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\102\024\077\025\075\026\106\027\123\030\130\031\057" +
    "\032\127\033\062\035\065\036\143\037\071\040\054\041" +
    "\103\042\137\043\067\044\107\045\072\046\120\047\141" +
    "\050\115\051\073\052\053\053\076\054\052\055\140\056" +
    "\113\057\114\061\203\063\117\064\055\065\102\103\153" +
    "\001\001\000\072\024\077\025\075\026\106\027\123\030" +
    "\130\031\057\032\127\033\062\035\065\036\143\037\155" +
    "\040\054\041\103\042\137\043\067\044\107\045\072\046" +
    "\120\047\141\050\115\051\073\052\053\053\076\054\166" +
    "\063\117\064\055\065\102\103\153\001\001\000\002\001" +
    "\001\000\070\024\077\025\075\026\106\027\123\030\130" +
    "\031\057\032\127\033\062\035\065\036\143\037\155\040" +
    "\054\041\103\042\137\043\067\044\107\045\072\046\120" +
    "\047\141\050\115\051\073\052\053\053\170\063\117\064" +
    "\055\065\102\103\153\001\001\000\002\001\001\000\066" +
    "\024\077\025\075\026\106\027\123\030\130\031\057\032" +
    "\127\033\062\035\065\036\143\037\155\040\054\041\103" +
    "\042\137\043\067\044\107\045\072\046\120\047\141\050" +
    "\115\051\073\052\172\063\117\064\055\065\102\103\153" +
    "\001\001\000\002\001\001\000\064\024\077\025\075\026" +
    "\106\027\123\030\130\031\057\032\127\033\062\035\065" +
    "\036\143\037\155\040\054\041\103\042\137\043\067\044" +
    "\107\045\072\046\120\047\141\050\115\051\174\063\117" +
    "\064\055\065\102\103\153\001\001\000\002\001\001\000" +
    "\062\024\077\025\075\026\106\027\123\030\130\031\057" +
    "\032\127\033\062\035\065\036\143\037\155\040\054\041" +
    "\103\042\137\043\067\044\107\045\072\046\120\047\141" +
    "\050\176\063\117\064\055\065\102\103\153\001\001\000" +
    "\002\001\001\000\060\024\077\025\075\026\106\027\123" +
    "\030\130\031\057\032\127\033\062\035\065\036\143\037" +
    "\155\040\054\041\103\042\137\043\067\044\107\045\072" +
    "\046\120\047\202\063\117\064\055\065\102\103\153\001" +
    "\001\000\060\024\077\025\075\026\106\027\123\030\130" +
    "\031\057\032\127\033\062\035\065\036\143\037\155\040" +
    "\054\041\103\042\137\043\067\044\107\045\072\046\120" +
    "\047\201\063\117\064\055\065\102\103\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\024\077\025\075\026\106\027\123\030\130\031\057\032" +
    "\127\033\062\035\065\036\143\037\155\040\054\041\103" +
    "\042\137\043\067\044\107\045\072\046\120\047\141\050" +
    "\115\051\073\052\053\053\076\054\052\055\140\056\205" +
    "\063\117\064\055\065\102\103\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\102\024\077\025\075\026\106" +
    "\027\123\030\130\031\057\032\127\033\062\035\065\036" +
    "\143\037\071\040\054\041\103\042\137\043\067\044\107" +
    "\045\072\046\120\047\141\050\115\051\073\052\053\053" +
    "\076\054\052\055\140\056\113\057\114\061\210\063\117" +
    "\064\055\065\102\103\153\001\001\000\002\001\001\000" +
    "\120\013\144\017\212\020\125\021\063\022\133\023\142" +
    "\024\077\025\075\026\106\027\123\030\130\031\057\032" +
    "\127\033\062\035\065\036\143\037\071\040\054\041\103" +
    "\042\137\043\067\044\107\045\072\046\120\047\141\050" +
    "\115\051\073\052\053\053\076\054\052\055\140\056\113" +
    "\057\114\061\136\062\116\063\117\064\055\065\102\103" +
    "\153\001\001\000\002\001\001\000\104\024\077\025\075" +
    "\026\106\027\123\030\130\031\057\032\127\033\062\034" +
    "\214\035\065\036\143\037\071\040\054\041\103\042\137" +
    "\043\067\044\107\045\072\046\120\047\141\050\115\051" +
    "\073\052\053\053\076\054\052\055\140\056\113\057\114" +
    "\061\216\063\117\064\055\065\102\103\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\024\077\025\075\026\106\027\123\030\130\031\057\032" +
    "\127\033\062\035\065\036\143\037\071\040\054\041\103" +
    "\042\137\043\067\044\107\045\072\046\120\047\141\050" +
    "\115\051\073\052\053\053\076\054\052\055\140\056\113" +
    "\057\114\061\221\063\117\064\055\065\102\103\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\024\077\025" +
    "\075\026\106\027\123\030\130\031\057\032\127\033\062" +
    "\034\226\035\065\036\143\037\071\040\054\041\103\042" +
    "\137\043\067\044\107\045\072\046\120\047\141\050\115" +
    "\051\073\052\053\053\076\054\052\055\140\056\113\057" +
    "\114\061\216\063\117\064\055\065\102\103\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\024\077\025\075\026\106\027\123\030\130\031\057" +
    "\032\127\033\062\035\065\036\143\037\155\040\054\041" +
    "\103\042\137\043\236\063\117\064\055\065\102\103\153" +
    "\001\001\000\050\024\077\025\075\026\106\027\123\030" +
    "\130\031\057\032\127\033\062\035\065\036\143\037\155" +
    "\040\054\041\103\042\137\043\235\063\117\064\055\065" +
    "\102\103\153\001\001\000\050\024\077\025\075\026\106" +
    "\027\123\030\130\031\057\032\127\033\062\035\065\036" +
    "\143\037\155\040\054\041\103\042\137\043\234\063\117" +
    "\064\055\065\102\103\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\024\077\025\075\026" +
    "\106\027\123\030\130\031\057\032\127\033\062\035\065" +
    "\036\143\037\071\040\054\041\103\042\137\043\067\044" +
    "\107\045\072\046\120\047\141\050\115\051\073\052\053" +
    "\053\076\054\052\055\140\056\113\057\114\061\244\063" +
    "\117\064\055\065\102\103\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\102\024\077\025" +
    "\075\026\106\027\123\030\130\031\057\032\127\033\062" +
    "\035\065\036\143\037\071\040\054\041\103\042\137\043" +
    "\067\044\107\045\072\046\120\047\141\050\115\051\073" +
    "\052\053\053\076\054\052\055\140\056\113\057\114\061" +
    "\247\063\117\064\055\065\102\103\153\001\001\000\002" +
    "\001\001\000\120\013\144\017\251\020\125\021\063\022" +
    "\133\023\142\024\077\025\075\026\106\027\123\030\130" +
    "\031\057\032\127\033\062\035\065\036\143\037\071\040" +
    "\054\041\103\042\137\043\067\044\107\045\072\046\120" +
    "\047\141\050\115\051\073\052\053\053\076\054\052\055" +
    "\140\056\113\057\114\061\136\062\116\063\117\064\055" +
    "\065\102\103\153\001\001\000\002\001\001\000\120\013" +
    "\144\017\253\020\125\021\063\022\133\023\142\024\077" +
    "\025\075\026\106\027\123\030\130\031\057\032\127\033" +
    "\062\035\065\036\143\037\071\040\054\041\103\042\137" +
    "\043\067\044\107\045\072\046\120\047\141\050\115\051" +
    "\073\052\053\053\076\054\052\055\140\056\113\057\114" +
    "\061\136\062\116\063\117\064\055\065\102\103\153\001" +
    "\001\000\002\001\001\000\004\063\255\001\001\000\002" +
    "\001\001\000\052\024\077\025\075\026\106\027\123\030" +
    "\130\031\057\032\127\033\062\035\065\036\143\037\155" +
    "\040\054\041\103\042\137\043\067\044\261\063\117\064" +
    "\055\065\102\103\153\001\001\000\052\024\077\025\075" +
    "\026\106\027\123\030\130\031\057\032\127\033\062\035" +
    "\065\036\143\037\155\040\054\041\103\042\137\043\067" +
    "\044\260\063\117\064\055\065\102\103\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\024\077\025\075\026\106\027\123\030" +
    "\130\031\057\032\127\033\062\035\065\036\143\037\071" +
    "\040\054\041\103\042\137\043\067\044\107\045\072\046" +
    "\120\047\141\050\115\051\073\052\053\053\076\054\052" +
    "\055\140\056\113\057\265\063\117\064\055\065\102\103" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\063\270\071\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\024\077\025" +
    "\075\026\106\027\123\030\130\031\057\032\127\033\062" +
    "\035\065\036\143\040\300\041\103\063\117\064\055\065" +
    "\102\103\153\001\001\000\002\001\001\000\050\024\077" +
    "\025\075\026\106\027\123\030\130\031\057\032\127\033" +
    "\062\035\065\036\143\037\155\040\054\041\103\042\137" +
    "\043\302\063\117\064\055\065\102\103\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\310\013\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\063\313\067\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\316\007" +
    "\320\063\117\103\041\104\045\105\315\106\046\001\001" +
    "\000\006\063\325\066\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\323\063\117" +
    "\103\041\104\045\105\315\106\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



	   /**  Code that is included with the action blocks
	     *
	     */

	   /* Need some classes that extend AbstractNode? Here's an example */
	   /* The TemporaryNode is just a place holder, and is good for development but
	    * should eventually go away.
	    */

	class Example extends AbstractNode {
    public String getName() { return "Example"; }
 }

 class TemporaryNode extends AbstractNode {
 
   private String s;
 
   public TemporaryNode(String s) {
     this.s = s;
   }
 
   public String getName() { return s; }
 
 }
 
 class BlockNode extends AbstractNode implements BlockIsh {
	    private String s;
	    public BlockNode(String s) {
	    this.s = s;}
	    public String getName() { return s; }
	    }
 
 public AbstractNode searchChildren(AbstractNode parent, String childName)
	{			  	 
	  AbstractNode tmpChildSib;
	  AbstractNode tmpChild = parent.getChild().getFirst();  
	  while(tmpChild != null){
		  String name = tmpChild.getName();
		  tmpChildSib = tmpChild.getSib();
		  if(name.equals(childName)){
			  return tmpChild;
		  }
		  tmpChild = tmpChildSib;
	 }
	 return tmpChild; 
	}   
 class ClassBody extends AbstractNode implements ClassIsh {
	    private String s;
	    public ClassBody(String s) {
	    this.s = s;}
	    public String getName() { return s; }
	    public AbstractNode getConstructors(){return searchChildren(this, "Constructors");}
	    public AbstractNode getMethods(){return searchChildren(this, "Methods");}
	    public AbstractNode getFields(){return searchChildren(this, "Fields");}
	    public AbstractNode getStatics(){return searchChildren(this, "Statics");}
	    public AbstractNode getInners(){return searchChildren(this, "Inner Classes");}
	    }
 class FieldNode extends AbstractNode implements FieldDeclaring {
	  private String s;
	  private SymInfoObj nodeSymInfo;
	  private ModsAttrsConcrete methodmods;
	  public FieldNode(String s, String modsStr) {
		  this.s = s;
		  methodmods = new ModsAttrsConcrete(modsStr);
	  }
	  public String getName() { return s; }
	  public TypeAttrs getType() {
		  ModTypeNode a = (ModTypeNode) this.getParent();
		  return a.getTypeObj();
	  }  
	  public ModsAttrs getMods() {
		  return methodmods;
		}     
	  // SymDeclaring methods
	   public SymInfo getSymInfo(){
		   return nodeSymInfo;
	   }
	   public void setSymInfo(SymInfo s){
		   nodeSymInfo = (SymInfoObj) s;
	   }
    }
	class StaticNode extends AbstractNode implements StaticReferencing {
	  private String s;
	  public StaticNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
		public Type getResultingType() {
			return null;
		}
		public String getFieldName() {
			return null;
		}
		public AbstractNode getClassName() {
			return null;
		}
	  }
	class ConstructorNode extends AbstractNode {
	  private String s;
	  public ConstructorNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	
	class ClassNode extends AbstractNode implements ClassDeclaring{
		  private String s;
		  private SymInfoObj nodeSymInfo;
		  private ModsAttrsConcrete methodmods;
		  public ClassNode(String s, String modsStr) {
			  this.s = s;
			  methodmods = new ModsAttrsConcrete(modsStr);
		  }
		  public String getName() { return s; }
		  // MethodDeclaring methods   
		  public ModsAttrs getMods() {
			  return methodmods;
			}     
		  // SymDeclaring methods
		   public SymInfo getSymInfo(){
			   return nodeSymInfo;
		   }
		   public void setSymInfo(SymInfo s){
			   nodeSymInfo = (SymInfoObj) s;
		   }
		}
	
	class MethodNode extends AbstractNode implements MethodDeclaring{
	  private String s;
	  private SymInfoObj nodeSymInfo;
	  private ModsAttrsConcrete methodmods;
	  public MethodNode(String s, String modsStr) {
		  this.s = s;
		  methodmods = new ModsAttrsConcrete(modsStr);
	  }
	  public String getName() { return s; }
	  // MethodDeclaring methods
	  public AbstractNode getBody(){			  	 
			  AbstractNode tmpChildSib;
			  AbstractNode tmpChild = this.getChild().getFirst();  
			  while(tmpChild != null){
				  String name = tmpChild.getName();
				  tmpChildSib = tmpChild.getSib();
				  if(name.equals("BLOCK")){
					  return tmpChild;
				  }
				  tmpChild = tmpChildSib;
		  }
		  return tmpChild; 
	  	}      
	  public ModsAttrs getMods() {
		  return methodmods;
		}     
	  public AbstractNode	getParams() {
		  AbstractNode tmpChild = this.getChild();
		  while(tmpChild != null){
			  if(tmpChild.getName().equals("Parameters")){
				  break;
			  }
		  }
		  return tmpChild;  
	  }	            
	  public TypeAttrs getType() {
		  ModTypeNode a = (ModTypeNode) this.getParent();
		  return a.getTypeObj();
	  }  
	  // SymDeclaring methods
	   public SymInfo getSymInfo(){
		   return nodeSymInfo;
	   }
	   public void setSymInfo(SymInfo s){
		   nodeSymInfo = (SymInfoObj) s;
	   }
	}
	
 class LocalNode extends AbstractNode implements LocalDeclaring {
	  private String s;
	  private SymInfoObj nodeSymInfo;
	  public LocalNode(String s) {
		  this.s = s;
	  }
	  public String getName() { return s; }
	  public TypeAttrs getType() {
		  TypeNode a = (TypeNode) this.getParent();
		  return a.getTypeObj();
	  }  
	  // SymDeclaring methods
	   public SymInfo getSymInfo(){
		   return nodeSymInfo;
	   }
	   public void setSymInfo(SymInfo s){
		   nodeSymInfo = (SymInfoObj) s;
	   }
 }
	 
	class TypeNode extends AbstractNode {
		  private String s;
		  private TypeAttrsConcrete methodtype;
		  public TypeNode(String s){
			  this.s = s;
			  this.methodtype = new TypeAttrsConcrete(s);
		  }
		  public String getName() { return s; }
		  public TypeAttrs getTypeObj() { return methodtype;}
		  }
	class ModTypeNode extends AbstractNode{
	  private String s;
	  private String fieldStr;
	  private TypeAttrsConcrete methodtype;
	  public ModTypeNode(String s, String fType) {
		  this.s = s;
		  this.fieldStr = fType;
		  this.methodtype = new TypeAttrsConcrete(s);
	  }
	  public String getName() { return s; }
	  public String getFieldStr() { return fieldStr; }		 
	  public TypeAttrs getTypeObj() { return methodtype;}
	}
	 class InnerClassNode extends AbstractNode {
	  private String s;
	  public InnerClassNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 class RefNode extends AbstractNode implements LocalReferencing {
	  private String s;
	  private SymInfoObj nodeSymInfo;
	  public RefNode(String s) {
	  this.s = "Local Ref "+s;
	  }
	  public String getName() { return s; }
	  public String getId() { 
		  String[] id = s.split(" ");
		  return id[id.length-1]; 
		  };
	   public SymInfo getSymInfo(){
		   return nodeSymInfo;
	   }
	   public void setSymInfo(SymInfo s){
		   nodeSymInfo = (SymInfoObj) s;
	   }
	  }
	 class AssignNode extends AbstractNode {
	  private String s;
	  public AssignNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 
 class IntegerNode extends AbstractNode {
    private Integer val;
    public IntegerNode(Integer val) { this.val = val; }
    public String getName() { return "Integer " + val; }
 }
 
 class ModsAttrsConcrete implements ModsAttrs {
	   private boolean isPub;
	   private boolean isStat;
	   public ModsAttrsConcrete(String modsStr){
		   if(modsStr.contains("Public")){
			   isPub = true;			  
		   }
		   else if(modsStr.contains("Private")){
			   isPub = false;
		   }
		   if(modsStr.contains("Static")){
			   isStat = true;			  
		   }
		   else 
			   isStat = false;
		   }
	   public boolean isPublic(){ return isPub;}
	   public boolean isStatic(){ return isStat;}
		public String toString() {
			String retStr = "";
			if(isPub){
				retStr = retStr + "Public";
			}
			else{
				retStr = retStr + "Private";
			}
			if(isStat){
				retStr = retStr + "Static";
			}
			return retStr;
		}
	}

 class TypeAttrsConcrete implements TypeAttrs {
		   private String type;
		   public TypeAttrsConcrete(String s){ this.type = s;}
		   public String getTypeString(){ return type;}
			public String toString() {
				return type;
			}
	}
 /*
 class NodeSymInfoObj implements SymInfo {
		protected TypeAttrs symType;
		protected ModsAttrs symMods;
		protected int symReg;
		protected AbstractNode defNode;
		protected int nestLevel;
		public NodeSymInfoObj(AbstractNode n, TypeAttrs t, ModsAttrs m) {
			symType = t;
			symMods = m;
			symReg = -1;
			defNode = n;
		}
		public int getNest() {
			return -1;
		}	
		public TypeAttrs getType() {
			return symType;
		}
		public ModsAttrs getMods() {
			return symMods;
		}
		public AbstractNode getDefiningNode() {
			return defNode;
		}
		public int getRegister() {
			return symReg;
		}
		public void setRegister(int r) {
			symReg = r;
		}		
	}
   */

   /*  Factory methods to make nodes 
    *   Add ones here that make it easy for you.
        The ones given here are temporary placeholders
    */

   public AbstractNode makeNode(Symbol s) { return new TemporaryNode(symString.symToString[s.sym]); }
   public AbstractNode makeNode(String s) { return new TemporaryNode(s);   }
   public AbstractNode makeNode(Integer i) { return new IntegerNode(i);   }
   public AbstractNode makeFieldNode(String s, String modsStr) { return new FieldNode(s, modsStr);   }
   public AbstractNode makeStaticNode(String s) { return new StaticNode(s);   }
   public AbstractNode makeConstructorNode(String s) { return new ConstructorNode(s);   }
   public AbstractNode makeMethodNode(String s, String modsStr) { return new MethodNode(s, modsStr);   }
   public AbstractNode makeClassNode(String s, String modsStr) { return new ClassNode(s, modsStr);   }
   public AbstractNode makeLocalNode(String s) { return new LocalNode(s);   }
   public AbstractNode makeInnerClassNode(String s) { return new InnerClassNode(s);   }
   public AbstractNode makeRefNode(String s) { return new RefNode(s);   }
   public AbstractNode makeAssignNode(String s) { return new AssignNode(s);   }
   public AbstractNode makeTypeNode(String s) { return new TypeNode(s);   }
   public AbstractNode makeModTypeNode(String s, String fType) { return new ModTypeNode(s, fType);   }

   public AbstractNode makeClassBody(String s) { return new ClassBody(s);   }
   public AbstractNode makeBlockNode(String s) { return new BlockNode(s);   }




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Number ::= INTNUMBER 
            {
              AbstractNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = makeNode(n); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Number",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Literal ::= LITERAL 
            {
              AbstractNode RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = makeNode(lit); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Identifier ::= IDENTIFIER 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = makeNode(id); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LogicalUnaryOperator ::= TILDE 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol rhs = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("~");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalUnaryOperator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LogicalUnaryOperator ::= BANG 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol rhs = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("!");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalUnaryOperator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LogicalUnaryExpression ::= LogicalUnaryOperator UnaryExpression 
            {
              AbstractNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode op = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode uexp = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = op;
		RESULT.adoptChildren(uexp);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalUnaryExpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LogicalUnaryExpression ::= PostfixExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalUnaryExpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ArithmeticUnaryOperator ::= MINUSOP 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol rhs = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("UnaryMinus");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArithmeticUnaryOperator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ArithmeticUnaryOperator ::= PLUSOP 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol rhs = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("UnaryPlus");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArithmeticUnaryOperator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // UnaryExpression ::= ArithmeticUnaryOperator CastExpression 
            {
              AbstractNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode op = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode exp = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = op;
		RESULT.adoptChildren(exp);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // UnaryExpression ::= LogicalUnaryExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CastExpression ::= LPAREN Expression RPAREN LogicalUnaryExpression 
            {
              AbstractNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode exp = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode lue = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("Final Cast");
    	RESULT.adoptChildren(exp);
    	RESULT.adoptChildren(lue);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CastExpression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CastExpression ::= LPAREN PrimitiveType RPAREN CastExpression 
            {
              AbstractNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode s = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode lue = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("Cast");
    	RESULT.adoptChildren(s);
    	RESULT.adoptChildren(lue);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CastExpression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CastExpression ::= UnaryExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CastExpression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MultiplicativeExpression ::= MultiplicativeExpression PERCENT CastExpression 
            {
              AbstractNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode lhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("Modulo");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MultiplicativeExpression ::= MultiplicativeExpression RSLASH CastExpression 
            {
              AbstractNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode lhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("Divided By");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MultiplicativeExpression ::= MultiplicativeExpression ASTERICK CastExpression 
            {
              AbstractNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode lhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("Times");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MultiplicativeExpression ::= CastExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // AdditiveExpression ::= AdditiveExpression MINUSOP MultiplicativeExpression 
            {
              AbstractNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode lhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("Minus");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // AdditiveExpression ::= AdditiveExpression PLUSOP MultiplicativeExpression 
            {
              AbstractNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode lhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("Plus");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AdditiveExpression ::= MultiplicativeExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ShiftExpression ::= AdditiveExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ShiftExpression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RelationalExpression ::= RelationalExpression INSTANCEOF TypeSpecifier 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("instanceof");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RelationalExpression ::= RelationalExpression OP_GE ShiftExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode(">=");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // RelationalExpression ::= RelationalExpression OP_LE ShiftExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("<=");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RelationalExpression ::= RelationalExpression OP_LT ShiftExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("<");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RelationalExpression ::= RelationalExpression OP_GT ShiftExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode(">");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RelationalExpression ::= ShiftExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EqualityExpression ::= EqualityExpression OP_NE RelationalExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("NOT EQUAL");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EqualityExpression ::= EqualityExpression OP_EQ RelationalExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("EQUAL");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EqualityExpression ::= RelationalExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // AndExpression ::= AndExpression AND EqualityExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeAssignNode("AND");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AndExpression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // AndExpression ::= EqualityExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AndExpression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExclusiveOrExpression ::= ExclusiveOrExpression HAT AndExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeAssignNode("XOR");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExclusiveOrExpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExclusiveOrExpression ::= AndExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExclusiveOrExpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // InclusiveOrExpression ::= InclusiveOrExpression PIPE ExclusiveOrExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeAssignNode("OR");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InclusiveOrExpression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // InclusiveOrExpression ::= ExclusiveOrExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InclusiveOrExpression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ConditionalAndExpression ::= ConditionalAndExpression OP_LAND InclusiveOrExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		/* FIXME: Conditional logic should short circuit. Find a way to do this */
		RESULT = makeAssignNode("AND");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ConditionalAndExpression ::= InclusiveOrExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ConditionalOrExpression ::= ConditionalOrExpression OP_LOR ConditionalAndExpression 
            {
              AbstractNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode left = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol op = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode right = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		/* FIXME: Conditional logic should short circuit. Find a way to do this */
		RESULT = makeAssignNode("OR");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalOrExpression",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ConditionalOrExpression ::= ConditionalAndExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalOrExpression",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON ConditionalExpression 
            {
              AbstractNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AbstractNode cond = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode cons = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int altright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode alt = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		/* Implement as an IF statement */
		RESULT = makeNode("If");
		AbstractNode predicate = makeNode("Predicate");
		AbstractNode consequent = makeNode("Consequent");
		AbstractNode alternative = makeNode("Alternative");
		predicate.adoptChildren(cond);
		consequent.adoptChildren(cons);
		alternative.adoptChildren(alt);
		RESULT.adoptChildren(predicate);
		RESULT.adoptChildren(consequent);
		RESULT.adoptChildren(alternative);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ConditionalExpression ::= ConditionalOrExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AssignmentOperator ::= ASS_ADD 
            {
              AbstractNode RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol tok = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeAssignNode("Add Assign");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AssignmentOperator ::= EQUALS 
            {
              AbstractNode RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol tok = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeAssignNode("Assign");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AssignmentExpression ::= UnaryExpression AssignmentOperator AssignmentExpression 
            {
              AbstractNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode lhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode op = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(op.getName().equals("Assign"))
		{
		RESULT = op;
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
		}
		else 
		{
			RESULT = makeAssignNode("Assign");
			/* Make a new node to reference lhs again */
			AbstractNode copyLeftSide = makeNode(lhs.getName());
			RESULT.adoptChildren(lhs);
			AbstractNode rightSide = makeAssignNode("Plus");
			rightSide.adoptChildren(copyLeftSide);
			rightSide.adoptChildren(rhs);
			RESULT.adoptChildren(rightSide);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentExpression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AssignmentExpression ::= ConditionalExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentExpression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expression ::= AssignmentExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PostfixExpression ::= PrimaryExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AllocationExpression ::= NEW TypeName LPAREN RPAREN 
            {
              AbstractNode RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode tn = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		RESULT = makeNode("NEW");
		RESULT.adoptChildren(tn);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AllocationExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AllocationExpression ::= NEW TypeName LPAREN ArgumentList RPAREN 
            {
              AbstractNode RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractNode tn = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode list = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = makeNode("NEW");
		AbstractNode args = makeNode("Arguments");
		args.adoptChildren(list);
		RESULT.adoptChildren(tn);
		RESULT.adoptChildren(args);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AllocationExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ArgumentList ::= ArgumentList COMMA Expression 
            {
              AbstractNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode list = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode expr = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = list;
		list.makeSibling(expr);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ArgumentList ::= Expression 
            {
              AbstractNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode expr = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = expr;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SpecialName ::= SUPER 
            {
              AbstractNode RESULT =null;
		
		RESULT = makeNode("SUPER");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SpecialName",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SpecialName ::= NULL 
            {
              AbstractNode RESULT =null;
		
		RESULT = makeNode("NULL");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SpecialName",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SpecialName ::= THIS 
            {
              AbstractNode RESULT =null;
		
		RESULT = makeNode("THIS");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SpecialName",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MethodReference ::= SpecialName 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodReference",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MethodReference ::= QualifiedName 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodReference",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MethodReference ::= ComplexPrimaryNoParenthesis 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodReference",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MethodCall ::= MethodReference LPAREN RPAREN 
            {
              AbstractNode RESULT =null;
		int methrefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int methrefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode methref = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		RESULT = methref;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodCall",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MethodCall ::= MethodReference LPAREN ArgumentList RPAREN 
            {
              AbstractNode RESULT =null;
		int methrefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int methrefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractNode methref = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode list = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		AbstractNode args = makeNode("Arguments");
		args.adoptChildren(list);
		AbstractNode method = makeNode("Method Call: " + methref.getName());
		method.adoptChildren(args);
		RESULT = method;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodCall",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FieldAccess ::= NotJustName PERIOD Identifier 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		AbstractNode fieldAccess = makeNode("Field Access");
		fieldAccess.adoptChildren(id);
		RESULT = rhs;
		RESULT.adoptChildren(fieldAccess);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldAccess",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ComplexPrimaryNoParenthesis ::= MethodCall 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexPrimaryNoParenthesis",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ComplexPrimaryNoParenthesis ::= FieldAccess 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexPrimaryNoParenthesis",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ComplexPrimaryNoParenthesis ::= Number 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexPrimaryNoParenthesis",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ComplexPrimaryNoParenthesis ::= Literal 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexPrimaryNoParenthesis",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ComplexPrimary ::= ComplexPrimaryNoParenthesis 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexPrimary",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ComplexPrimary ::= LPAREN Expression RPAREN 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexPrimary",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NotJustName ::= ComplexPrimary 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotJustName",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NotJustName ::= AllocationExpression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotJustName",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NotJustName ::= SpecialName 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotJustName",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PrimaryExpression ::= NotJustName 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PrimaryExpression ::= QualifiedName 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = t;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReturnStatement ::= RETURN SEMICOLON 
            {
              AbstractNode RESULT =null;
		
		RESULT = makeNode("Return");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnStatement ::= RETURN Expression SEMICOLON 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = makeNode("Return " + rhs.getName());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IterationStatement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode lhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("While");
		RESULT.adoptChildren(rhs);
		RESULT.adoptChildren(lhs);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SelectionStatement ::= IF LPAREN Expression RPAREN Statement 
            {
              AbstractNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode cond = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("If");
		AbstractNode predicate = makeNode("Predicate");
		AbstractNode consequent = makeNode("Consequent");
		RESULT.adoptChildren(predicate);
		RESULT.adoptChildren(consequent);
		predicate.adoptChildren(cond);
		consequent.adoptChildren(rhs);

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectionStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SelectionStatement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              AbstractNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AbstractNode cond = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode lhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("If");
		AbstractNode predicate = makeNode("Predicate");
		AbstractNode consequent = makeNode("Consequent");
		AbstractNode alternative = makeNode("Alternative");
		RESULT.adoptChildren(predicate);
		RESULT.adoptChildren(consequent);
		RESULT.adoptChildren(alternative);
		predicate.adoptChildren(cond);
		consequent.adoptChildren(rhs);
		alternative.adoptChildren(lhs);

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectionStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpressionStatement ::= Expression 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EmptyStatement ::= SEMICOLON 
            {
              AbstractNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmptyStatement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= Block 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= ReturnStatement 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= IterationStatement 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= SelectionStatement 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= ExpressionStatement SEMICOLON 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= EmptyStatement 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LocalVariableDeclarators ::= LocalVariableDeclarators COMMA LocalVariableDeclaratorName 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode v = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			
		fds.makeSibling(v);
		RESULT = v;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarators",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LocalVariableDeclarators ::= LocalVariableDeclaratorName 
            {
              AbstractNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode v = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = v;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarators",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LocalVariableDeclarationStatement ::= ClassDeclaration 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LocalVariableDeclarationStatement ::= TypeSpecifier LocalVariableDeclarators SEMICOLON 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
	   	RESULT =  makeTypeNode(t.getName());
	   	AbstractNode tmp = rhs.getFirst();
	   	AbstractNode tmpSib = tmp.getSib();
	   	AbstractNode newNode = makeLocalNode(t.getName()+" "+tmp.getName());
		while(tmpSib != null){
			tmp.orphan();
			AbstractNode newNextNode = makeLocalNode(t.getName()+" "+tmpSib.getName());			
			newNode.makeSibling(newNextNode);
			tmp = tmpSib;
			tmpSib = tmp.getSib();
		};
		RESULT.adoptChildren(newNode);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LocalVariableDeclarationOrStatement ::= Statement 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationOrStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LocalVariableDeclarationOrStatement ::= LocalVariableDeclarationStatement 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationOrStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LocalVariableDeclarationsAndStatements ::= LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement 
            {
              AbstractNode RESULT =null;
		int lvdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lvdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode lvds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = lvds;
		RESULT.makeSibling(rhs);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationsAndStatements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LocalVariableDeclarationsAndStatements ::= LocalVariableDeclarationOrStatement 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationsAndStatements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Block ::= LBRACE RBRACE 
            {
              AbstractNode RESULT =null;
		
		RESULT = makeBlockNode("BLOCK");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Block ::= LBRACE LocalVariableDeclarationsAndStatements RBRACE 
            {
              AbstractNode RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode stmts = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		RESULT = makeBlockNode("BLOCK");
		RESULT.adoptChildren(stmts);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StaticInitializer ::= STATIC Block 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeModTypeNode("STATIC INITIALIZER", "StaticType");
		RESULT.adoptChildren(rhs); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticInitializer",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ConstructorDeclaration ::= Modifiers MethodDeclarator Block 
            {
              AbstractNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode m = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode md = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT =  makeModTypeNode("", "ConstructorType");
		   	AbstractNode newNode = makeConstructorNode(m.getName()+" "+md.getName());
		   	AbstractNode param = md.getChild();
		   	if (param != null){
		   		newNode.adoptChildren(param);
		   	}	
		   	md.orphan();
		   	newNode.adoptChildren(rhs);
			RESULT.adoptChildren(newNode);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodBody ::= Block 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = rhs; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LocalVariableDeclaratorName ::= Identifier 
            {
              AbstractNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode in = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode("Local " + in.getName());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclaratorName",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FieldVariableDeclaratorName ::= Identifier 
            {
              AbstractNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode in = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode(in.getName()); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldVariableDeclaratorName",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclaratorName ::= Identifier 
            {
              AbstractNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode in = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeNode(in.getName()); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaratorName",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DeclaratorName ::= Identifier 
            {
              AbstractNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode in = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = in; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaratorName",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Parameter ::= TypeSpecifier DeclaratorName 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode dn = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = makeNode(t.getName()+" "+dn.getName());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ParameterList ::= ParameterList COMMA Parameter 
            {
              AbstractNode RESULT =null;
		int spineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int spineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode spine = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = rhs; rhs.makeSibling(spine.getFirst()); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ParameterList ::= Parameter 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = rhs; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodDeclarator ::= MethodDeclaratorName LPAREN RPAREN 
            {
              AbstractNode RESULT =null;
		int dnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode dn = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 	 
		AbstractNode param = makeNode("Parameters");
	 	dn.adoptChildren(param);
	 	RESULT = dn;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclarator ::= MethodDeclaratorName LPAREN ParameterList RPAREN 
            {
              AbstractNode RESULT =null;
		int dnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractNode dn = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode pl = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	
	 	AbstractNode param = makeNode("Parameters");
	 	param.adoptChildren(pl); 
	 	dn.adoptChildren(param); 
	 	RESULT = dn;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDeclaration ::= Modifiers TypeSpecifier MethodDeclarator MethodBody 
            {
              AbstractNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractNode m = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode md = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
		   	RESULT =  makeModTypeNode(t.getName(), "MethodType");
		   	AbstractNode newNode = makeMethodNode(m.getName()+" "+t.getName()+" "+md.getName(), m.getName());
		   	AbstractNode param = md.getChild();
		   	//if (param != null){
		   		newNode.adoptChildren(param);
		   	//}	
		   	md.orphan();
		   	newNode.adoptChildren(rhs);
			RESULT.adoptChildren(newNode);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FieldVariableDeclarators ::= FieldVariableDeclarators COMMA FieldVariableDeclaratorName 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode v = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = v; fds.makeSibling(v); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldVariableDeclarators",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FieldVariableDeclarators ::= FieldVariableDeclaratorName 
            {
              AbstractNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode v = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = v; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldVariableDeclarators",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TypeName ::= QualifiedName 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = rhs; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TypeName ::= PrimitiveType 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = rhs; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TypeSpecifier ::= TypeName 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        	RESULT = rhs; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FieldVariableDeclaration ::= Modifiers TypeSpecifier FieldVariableDeclarators 
            {
              AbstractNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode m = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fvdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fvdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode fvds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
	   	RESULT =  makeModTypeNode(t.getName(), "FieldType");
	   	AbstractNode tmp = fvds.getFirst();
	   	AbstractNode tmpSib = tmp.getSib();
	   	AbstractNode newNode = makeFieldNode(m.getName()+" "+t.getName()+" "+tmp.getName(), m.getName());
		while(tmpSib != null){
			tmp.orphan();
			AbstractNode newNextNode = makeFieldNode(m.getName()+" "+t.getName()+" "+tmpSib.getName(), m.getName());			
			newNode.makeSibling(newNextNode);
			tmp = tmpSib;
			tmpSib = tmp.getSib();
		};
		RESULT.adoptChildren(newNode);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldVariableDeclaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldDeclaration ::= ClassDeclaration 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   	RESULT =  makeModTypeNode("Class Decl", "ClassType");
		RESULT.adoptChildren(rhs);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldDeclaration ::= StaticInitializer 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldDeclaration ::= ConstructorDeclaration 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FieldDeclaration ::= MethodDeclaration 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FieldDeclaration ::= FieldVariableDeclaration SEMICOLON 
            {
              AbstractNode RESULT =null;
		int fvdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fvdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode fvd = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = fvd;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FieldDeclarations ::= FieldDeclarations FieldDeclaration 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    	RESULT = fds;
    	RESULT.adoptChildren(fd);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclarations",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FieldDeclarations ::= FieldDeclaration 
            {
              AbstractNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = makeClassBody("Class Body");
		RESULT.adoptChildren(fd);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclarations",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ClassBody ::= LBRACE RBRACE 
            {
              AbstractNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ClassBody ::= LBRACE FieldDeclarations RBRACE 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = fds;
				/* Make a node for each of the five categories of class members */
				AbstractNode fields = makeNode("Fields");
				AbstractNode statics = makeNode("Statics");
				AbstractNode constructors = makeNode("Constructors");
				AbstractNode methods = makeNode("Methods");
				AbstractNode innerclasses = makeNode("Inner Classes");

				/* Abandon all class members from the classBody level */				
				AbstractNode classFieldChildren = fds.getChild();
				fds.abandonChildren();
				
				/* Sort class members into the proper category */
				//AbstractNode tmp, tmpSib;
				ModTypeNode tmp, tmpSib;
				tmp = (ModTypeNode)classFieldChildren.getFirst();
				while(tmp != null){
					tmpSib = (ModTypeNode)tmp.getSib();
					if (tmp.getFieldStr().equals("FieldType")){
						tmp.orphan();
						fields.adoptChildren(tmp);
					}
					else if (tmp.getFieldStr().equals("MethodType")){
						tmp.orphan();
						methods.adoptChildren(tmp);
					}
					else if (tmp.getFieldStr().equals("StaticType")){
						tmp.orphan();
						AbstractNode tmpChild = tmp.getChild();
						tmp.abandonChildren();
						statics.adoptChildren(tmpChild);
					}
					else if (tmp.getFieldStr().equals("ConstructorType")){
						tmp.orphan();
						constructors.adoptChildren(tmp);
					}
					else if (tmp.getFieldStr().equals("ClassType")){
						tmp.orphan();
						innerclasses.adoptChildren(tmp);
					}
					else  // Error!
					{
						String the_name =  tmp.getName();
						System.out.println("\nError at ClassBody production: no matching category. Name was: " +the_name+ " | Class toString was: "+tmp.getChild().getClass().toString());
						System.out.println("\tfieldStr was: "+tmp.getFieldStr());
					}
					tmp = tmpSib;
				}
				
				/* ClassBody adopts the category nodes */
				fds.adoptChildren(fields);
				fds.adoptChildren(statics);
				fds.adoptChildren(constructors);
				fds.adoptChildren(methods);
				fds.adoptChildren(innerclasses);				
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // QualifiedName ::= QualifiedName PERIOD Identifier 
            {
              AbstractNode RESULT =null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractNode qn = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        	RESULT = id; 
        	id.makeSibling(qn); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("QualifiedName",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // QualifiedName ::= Identifier 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			RESULT = makeRefNode(id.getName());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("QualifiedName",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PrimitiveType ::= VOID 
            {
              AbstractNode RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol tok = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    	RESULT = makeNode("VOID"); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimitiveType",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PrimitiveType ::= INT 
            {
              AbstractNode RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol tok = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    	RESULT = makeNode("I"); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimitiveType",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PrimitiveType ::= BOOLEAN 
            {
              AbstractNode RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol tok = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    	RESULT = makeNode("BOOL"); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimitiveType",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Modifiers ::= Modifiers STATIC 
            {
              AbstractNode RESULT =null;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode mds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
		RESULT = makeNode(mds.getName()+ " Static"); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Modifiers",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Modifiers ::= Modifiers PRIVATE 
            {
              AbstractNode RESULT =null;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode mds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
		RESULT = makeNode(mds.getName()+ " Private"); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Modifiers",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Modifiers ::= Modifiers PUBLIC 
            {
              AbstractNode RESULT =null;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode mds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
		RESULT = makeNode(mds.getName()+ " Public"); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Modifiers",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Modifiers ::= STATIC 
            {
              AbstractNode RESULT =null;
		 
		RESULT = makeNode("Static"); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Modifiers",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Modifiers ::= PRIVATE 
            {
              AbstractNode RESULT =null;
		 
		RESULT = makeNode("Private");  
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Modifiers",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Modifiers ::= PUBLIC 
            {
              AbstractNode RESULT =null;
		 
		RESULT = makeNode("Public");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Modifiers",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDeclaration ::= Modifiers CLASS Identifier ClassBody 
            {
              AbstractNode RESULT =null;
		int modsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int modsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractNode mods = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Symbol cl = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int clbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode clb = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        	RESULT = makeClassNode("class " + id.getName(), mods.getName());
			RESULT.adoptChildren(mods);
	    	RESULT.adoptChildren(clb);
    	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TypeDeclaration ::= ClassDeclaration 
            {
              AbstractNode RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode rhs = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			RESULT = rhs;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TypeDeclarations ::= TypeDeclarations TypeDeclaration 
            {
              AbstractNode RESULT =null;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode tds = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode td = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			RESULT = tds.makeSibling(td);  
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclarations",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TypeDeclarations ::= TypeDeclaration 
            {
              AbstractNode RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode td = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = td; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclarations",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CompilationUnit ::= TypeDeclarations 
            {
              AbstractNode RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractNode td = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			AbstractNode prog = makeNode("Program").adoptChildren(td);

			System.out.println("\nAST\n");
			prog.walkTree(new PrintTree(System.out));
			RESULT = prog;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractNode start_val = (AbstractNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

