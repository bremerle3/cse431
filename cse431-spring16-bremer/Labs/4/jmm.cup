package autogen;
import lab7.*;
import java_cup.runtime.*;

import java.util.Vector;
import java.util.Enumeration;

// $Id: jmm.cup 33 2010-08-09 21:47:19Z cytron $

/* 
 * Lab 3
 * Team Members: Manil Bastola and Leo Bremer
 */

/* Extra credit implemented by Leo:  pre and post increment and decrement and more primitive types.
 * 
 */

/*
 * Java minus minus grammar
 *
 */

/*
 * This is a standard Java grammar, modified for our use.  Many features
 * are noted as "extra credit".  You must negotiate
 * the extra credit with the professor.
 *
 * Some features are added too: look for comments to that effect.
 * RC
 */


action code {:

   /**  Code that is included with the action blocks
     *
     */

   /* Need some classes that extend AbstractNode? Here's an example */
   /* The TemporaryNode is just a place holder, and is good for development but
    * should eventually go away.
    */

   class Example extends AbstractNode {
      public String getName() { return "Example"; }
   }

   class TemporaryNode extends AbstractNode {
   
     private String s;
   
     public TemporaryNode(String s) {
       this.s = s;
     }
   
     public String getName() { return s; }
   
   }
   
   class FieldNode extends AbstractNode {
      private String s;
      public FieldNode(String s) {
      this.s = s;}
      public String getName() { return s; }
      }
	class StaticNode extends AbstractNode {
	  private String s;
	  public StaticNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	class ConstructorNode extends AbstractNode {
	  private String s;
	  public ConstructorNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	class MethodNode extends AbstractNode {
	  private String s;
	  public MethodNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 class InnerClassNode extends AbstractNode {
	  private String s;
	  public InnerClassNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 class RefNode extends AbstractNode {
	  private String s;
	  public RefNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 class AssignNode extends AbstractNode {
	  private String s;
	  public AssignNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 class PrimitiveNode extends AbstractNode {
	  private String s;
	  public PrimitiveNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 class AddNode extends AbstractNode {
	  private String s;
	  public AddNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 class MinusNode extends AbstractNode {
	  private String s;
	  public MinusNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 class ClassBodyNode extends AbstractNode {
	  private String s;
	  public ClassBodyNode(String s) {
	  this.s = s;}
	  public String getName() { return s; }
	  }
	 
   class IntegerNode extends AbstractNode {
      private Integer val;
      public IntegerNode(Integer val) { this.val = val; }
      public String getName() { return "Integer " + val; }
   }

   /*  Factory methods to make nodes 
    *   Add ones here that make it easy for you.
        The ones given here are temporary placeholders
    */

   public AbstractNode makeNode(Symbol s) { return new TemporaryNode(symString.symToString[s.sym]); }
   public AbstractNode makeNode(String s) { return new TemporaryNode(s);   }
   public AbstractNode makeNode(Integer i) { return new IntegerNode(i);   }
   public AbstractNode makeFieldNode(String s) { return new FieldNode(s);   }
   public AbstractNode makeStaticNode(String s) { return new StaticNode(s);   }
   public AbstractNode makeConstructorNode(String s) { return new ConstructorNode(s);   }
   public AbstractNode makeMethodNode(String s) { return new MethodNode(s);   }
   public AbstractNode makeInnerClassNode(String s) { return new InnerClassNode(s);   }
   public AbstractNode makeRefNode(String s) { return new makeRefNode(s);   }
   public AbstractNode makeAssignNode(String s) { return new AssignNode(s);   }
   public AbstractNode makePrimitiveNode(String s) { return new PrimitiveNode(s);   }
   public AbstractNode makeAddNode(String s) { return new AddNode(s);   }
   public AbstractNode makeMinusNode(String s) { return new MinusNode(s);   }
   public AbstractNode makeClassBodyNode(String s) { return new ClassBodyNode(s);   }


:};

/*
 * Almost all of these can just be Symbol types, used for parsing.  Occasionally,
 * a terminal has semantic information of use, as was the case for number in hw2.
 * In those cases, declare the Symbol appropriately but you'll have to modify the
 * Scanner to return the right type.  I've done this for integer and string types below
 */

terminal  Symbol   OP_GE, OP_LE, OP_EQ, OP_NE, OP_GT, OP_LT;
terminal  Symbol   OP_LAND, OP_LOR;
terminal  Symbol   INSTANCEOF;
terminal  Symbol   HAT, TILDE;
terminal  Symbol   BOOLEAN;
terminal  Symbol   CLASS;
terminal  Symbol   ELSE;
terminal  Symbol   IF, INT;
terminal  Symbol   BYTE, CHAR, SHORT, LONG, FLOAT, DOUBLE;  // Added terminals for extra credit
terminal  Symbol   NEW, NULL;
terminal  Symbol   PRIVATE, PUBLIC;
terminal  Symbol   RETURN;
terminal  Symbol   STATIC, SUPER;
terminal  Symbol   THIS;
terminal  Symbol   VOID;
terminal  Symbol   WHILE;
terminal  Symbol   ASS_ADD;
terminal  Symbol   LPAREN, RPAREN, LBRACE, RBRACE, EQUALS;
terminal  Symbol   PERIOD, COLON, SEMICOLON, COMMA, PIPE, AND, ASTERICK;
terminal  Symbol   PLUSOP, MINUSOP, RSLASH, PERCENT, QUESTION;
terminal  Symbol   BANG; 

terminal  String   IDENTIFIER, LITERAL;
terminal  Integer  INTNUMBER;

terminal  Symbol   UNARY_INC;   // Added for post increment
terminal  Symbol   UNARY_DEC;   // Added for post decrement


/* To save you typing, I've made all these AbstracNode types.  You will want
 * to customize them as you go.
 */

non terminal   AbstractNode     CompilationUnit;
non terminal   AbstractNode     FieldVariableDeclaration;
non terminal   AbstractNode     MethodDeclaration;
non terminal   AbstractNode     MethodDeclarator;
non terminal   AbstractNode     ParameterList,  Parameter;
non terminal   AbstractNode     MethodBody, ConstructorDeclaration;
non terminal   AbstractNode     StaticInitializer;
non terminal   AbstractNode     Block;
non terminal   AbstractNode     LocalVariableDeclarationsAndStatements;
non terminal   AbstractNode     LocalVariableDeclarationOrStatement;
non terminal   AbstractNode     LocalVariableDeclarationStatement ;
non terminal   AbstractNode     Statement, EmptyStatement;
non terminal   AbstractNode     ExpressionStatement, SelectionStatement;
non terminal   AbstractNode     IterationStatement;
non terminal   AbstractNode     PrimaryExpression;
non terminal   AbstractNode     NotJustName, ComplexPrimary, ComplexPrimaryNoParenthesis;
non terminal   AbstractNode     FieldAccess, MethodCall, MethodReference;
non terminal   AbstractNode     SpecialName, ArgumentList, AllocationExpression;
non terminal   AbstractNode     PostfixExpression;
non terminal   AbstractNode     UnaryExpression, LogicalUnaryExpression;
non terminal   AbstractNode     LogicalUnaryOperator, ArithmeticUnaryOperator;
non terminal   AbstractNode     CastExpression, MultiplicativeExpression;
non terminal   AbstractNode     AdditiveExpression, ShiftExpression, RelationalExpression;
non terminal   AbstractNode     EqualityExpression, AndExpression, ExclusiveOrExpression;
non terminal   AbstractNode     InclusiveOrExpression, ConditionalAndExpression;
non terminal   AbstractNode     ConditionalOrExpression;
non terminal   AbstractNode     ConditionalExpression, AssignmentExpression;
non terminal   AbstractNode     AssignmentOperator;
non terminal   AbstractNode     Expression;
non terminal   AbstractNode     ReturnStatement;

non terminal   AbstractNode     Identifier;
non terminal   AbstractNode     Literal;
non terminal   AbstractNode     Number;
non terminal   AbstractNode     DeclaratorName; 
non terminal   AbstractNode     FieldVariableDeclaratorName; 
non terminal   AbstractNode     MethodDeclaratorName; 
non terminal   AbstractNode     LocalVariableDeclaratorName; 
non terminal   AbstractNode     TypeDeclarations;
non terminal   AbstractNode     TypeDeclaration;
non terminal   AbstractNode     ClassDeclaration;
non terminal   AbstractNode     ClassBody;
non terminal   AbstractNode     Modifiers;
non terminal   AbstractNode     FieldDeclarations;
non terminal   AbstractNode     FieldDeclaration;
non terminal   AbstractNode     FieldVariableDeclarators;
non terminal   AbstractNode     LocalVariableDeclarators;
non terminal   AbstractNode     QualifiedName; 
non terminal   AbstractNode     TypeName, TypeSpecifier;
non terminal   AbstractNode     PrimitiveType;

/* Precedences */
precedence left ELSE, NULL;


start with CompilationUnit;


CompilationUnit
        ::=	TypeDeclarations:td
		{:
			AbstractNode prog = makeNode("Program").adoptChildren(td);

			System.out.println("\nAST\n");
			prog.walkTree(new PrintTree(System.out));
			RESULT = prog;
		:}
        ;

/*
 * Simple node magic to link nodes together as siblings.  Covered
 * in class -- you have to be aware of how the list is growing
 * These children will be adopted by CompilationUnit rule above.
 */

TypeDeclarations
        ::= TypeDeclaration:td
		{:
			RESULT = td; 
		:}
        |   TypeDeclarations:tds  TypeDeclaration:td
		{: 
			RESULT = tds.makeSibling(td);  
        :}
        ;

/*
 * Extra credit:  interfaces, but classes are all we'll deal with by default
 */
TypeDeclaration
        ::= ClassDeclaration:rhs
		{: 
			RESULT = rhs;
		:}
        ;


ClassDeclaration
        ::= Modifiers:mods CLASS:cl Identifier:id ClassBody:clb
        {:  
        	RESULT = makeNode("class " + id.getName());
			RESULT.adoptChildren(mods);
	    	RESULT.adoptChildren(clb);
    	:}
		;

/*
 * Process bottom-up to figure out whether the Modifiee
 * is   static or not
 * is   public or not
 * A pair of booleans, like IntPair could be used, or IntPair could be used
 * if you know what I mean.
 */
	Modifiers
	::= PUBLIC
	{: 
		RESULT = makeNode("Public");
	:}
	|   PRIVATE
	{: 
		RESULT = makeNode("Private");  
	:}
	|   STATIC
	{: 
		RESULT = makeNode("Static"); 
	:}
	|   Modifiers:mds PUBLIC
	{:  
		RESULT = makeNode(mds.getName()+ " Public"); 
	:}
	|   Modifiers:mds PRIVATE
	{:  
		RESULT = makeNode(mds.getName()+ " Private"); 
	:}
	|   Modifiers:mds STATIC
	{:  
		RESULT = makeNode(mds.getName()+ " Static"); 
	:}
	;


/*
 * Extra credit:  other types
 */
PrimitiveType
    ::=	BOOLEAN:tok
    {: 
    	RESULT = makePrimitiveNode("BOOL"); 
	:}
    | 	INT:tok
    {: 
    	RESULT = makePrimitiveNode("I"); 
	:}
    | 	VOID:tok
    {: 
    	RESULT = makePrimitiveNode("VOID");  
	:}
	| 	BYTE:tok
	{: 
		RESULT = makePrimitiveNode("BYTE"); 
	:}
	| 	CHAR:tok
	{: 
		RESULT = makePrimitiveNode("CHAR"); 
	:}
	| 	SHORT:tok
	{: 
		RESULT = makePrimitiveNode("SHORT"); 
	:}
	| 	LONG:tok
	{: 
		RESULT = makePrimitiveNode("LONG"); 
	:}
	| 	FLOAT:tok
	{: 
		RESULT = makePrimitiveNode("FLOAT"); 
	:}
	| 	DOUBLE:tok
	{: 
		RESULT = makePrimitiveNode("DOUBLE"); 
	:}
	    ;

/*
 * You need a nice structure to represent this list of identifiers.
 * You might consider java.util.Vector
 */
QualifiedName
        ::= Identifier:id
        {: 
        	RESULT = id; 
		:}
        |   QualifiedName:qn PERIOD Identifier:id
        {:
        	RESULT = id; 
        	id.makeSibling(qn); 
        :}
        ;

/*
 * In a given program, FieldDeclarations can occur in any order.
 * But we would like them grouped together.
 * So, structure your AST so that the items coming back from
 * FieldDeclarations are grouped by:
 *
 *   fields, statics, constructors, methods, inner classes
 *
 * (run the class solution if confused)
 */
    ClassBody
	::= LBRACE FieldDeclarations:fds RBRACE
			{:
				RESULT = fds;
				/* Make a node for each of the five categories of class members */
				AbstractNode fields = makeFieldNode("Fields");
				AbstractNode statics = makeStaticNode("Statics");
				AbstractNode constructors = makeConstructorNode("Constructors");
				AbstractNode methods = makeMethodNode("Methods");
				AbstractNode innerclasses = makeInnerClassNode("Inner Classes");

				/* Abandon all class members from the classBody level */				
				AbstractNode classFieldChildren = fds.getChild();
				fds.abandonChildren();
				
				/* Sort class members into the proper category */
				AbstractNode tmp, tmpSib;
				tmp = classFieldChildren.getFirst();
				while(tmp != null){
					tmpSib = tmp.getSib();
					if (tmp.getClass() == fields.getClass()){
						tmp.orphan();
						fields.adoptChildren(tmp);
					}
					else if (tmp.getClass() == methods.getClass()){
						tmp.orphan();
						methods.adoptChildren(tmp);
					}
					else if (tmp.getClass() == statics.getClass()){
						tmp.orphan();
						AbstractNode tmpChild = tmp.getChild();
						tmp.abandonChildren();
						statics.adoptChildren(tmpChild);
					}
					else if (tmp.getClass() == constructors.getClass()){
						tmp.orphan();
						constructors.adoptChildren(tmp);
					}
					else if (tmp.getClass() == innerclasses.getClass()){
						tmp.orphan();
						innerclasses.adoptChildren(tmp);
					}
					else  // Error!
					{
						String the_name =  tmp.getName();
						System.out.println("\nError at ClassBody production: no matching category. Name was: " +the_name);
					}
					tmp = tmpSib;
				}
				
				/* ClassBody adopts the category nodes */
				fds.adoptChildren(fields);
				fds.adoptChildren(statics);
				fds.adoptChildren(constructors);
				fds.adoptChildren(methods);
				fds.adoptChildren(innerclasses);				
			:}
	|   LBRACE RBRACE
	;

FieldDeclarations
	::= FieldDeclaration:fd
	{:
		RESULT = makeClassBodyNode("Class Body");
		RESULT.adoptChildren(fd);
	:}
    |   FieldDeclarations:fds FieldDeclaration:fd
    {:
    	RESULT = fds;
    	RESULT.adoptChildren(fd);
    :}
    ;
 
FieldDeclaration
	::= FieldVariableDeclaration:fvd SEMICOLON
	{:
		RESULT = fvd;
	:}
	|   MethodDeclaration:rhs
	{:
		RESULT = rhs;
	:}
	|   ConstructorDeclaration:rhs
	{:
		RESULT = rhs;
	:}
	|   StaticInitializer:rhs
	{:
		RESULT = rhs;
	:}
	|   ClassDeclaration                     /* Inner classes */
	{:
		RESULT = makeInnerClassNode("An Inner Class");
	:}
	;

/*
 * This isn't structured so nicely for a bottom up parse.  Recall
 * the example I did in class for Digits, where the "type" of the digits
 * (i.e., the base) is sitting off to the side.  You'll have to do something
 * here to get the information where you want it, so that the declarations can
 * be suitably annotated with their type and modifier information.
 */
FieldVariableDeclaration
	::= Modifiers:m TypeSpecifier:t FieldVariableDeclarators:fvds
	{:  
	   	RESULT =  makeFieldNode(t.getName());
	   	AbstractNode tmp = fvds.getFirst();
	   	AbstractNode tmpSib = tmp.getSib();
	   	AbstractNode newNode = makeFieldNode(m.getName()+" "+t.getName()+" "+tmp.getName());
		while(tmpSib != null){
			tmp.orphan();
			AbstractNode newNextNode = makeFieldNode(m.getName()+" "+t.getName()+" "+tmpSib.getName());			
			newNode.makeSibling(newNextNode);
			tmp = tmpSib;
			tmpSib = tmp.getSib();
		};
		RESULT.adoptChildren(newNode);
	:}
	;

TypeSpecifier
        ::= TypeName:rhs
        {: 
        	RESULT = rhs; 
		:}
        ;

TypeName
	::= PrimitiveType:rhs
	{: 
		RESULT = rhs; 
	:}
	|   QualifiedName:rhs
	{: 
		RESULT = rhs; 
	:}
	;

FieldVariableDeclarators
	::=  FieldVariableDeclaratorName:v
	{: 
		RESULT = v; 
	:}
	|    FieldVariableDeclarators:fds COMMA FieldVariableDeclaratorName:v
	{: 
		RESULT = v; fds.makeSibling(v); 
	:}
	;

/*
 * We require modifiers, extra credit for package stuff
 */
MethodDeclaration
	::= Modifiers:m TypeSpecifier:t MethodDeclarator:md     MethodBody:rhs
	{:  
		   	RESULT =  makeMethodNode(t.getName());
		   	AbstractNode newNode = makeMethodNode(m.getName()+" "+t.getName()+" "+md.getName());
		   	AbstractNode param = md.getChild();
		   	if (param != null){
		   		newNode.adoptChildren(param);
		   	}	
		   	md.orphan();
		   	newNode.adoptChildren(rhs);
			RESULT.adoptChildren(newNode);
		:}
	;

MethodDeclarator
	::= MethodDeclaratorName:dn LPAREN ParameterList:pl RPAREN
	{: 	
	 	AbstractNode param = makeNode("Parameters");
	 	param.adoptChildren(pl); 
	 	dn.adoptChildren(param); 
	 	RESULT = dn;
	 :}
	|   MethodDeclaratorName:dn LPAREN RPAREN
	{: 	 
	 	RESULT = dn;
	:}
	;

ParameterList
	::= Parameter:rhs
	{: 
		RESULT = rhs; 
	:}
	|   ParameterList:spine COMMA Parameter:rhs
	{: 
		RESULT = rhs; rhs.makeSibling(spine.getFirst()); 
	:}
	;

Parameter
	::= TypeSpecifier:t DeclaratorName:dn
	{: 
		RESULT = makeNode(t.getName()+" "+dn.getName());
	:}
	;

DeclaratorName
	::= Identifier:in
	{: 
		RESULT = in; 
	:}
        ;

MethodDeclaratorName
	::= Identifier:in
	{:
		RESULT = makeMethodNode(in.getName()); 
	:}
        ;

FieldVariableDeclaratorName
	::= Identifier:in
	{:
		RESULT = makeFieldNode(in.getName()); 
	:}
        ;

LocalVariableDeclaratorName
::= Identifier:in
	{:
		RESULT = makeFieldNode("Local " + in.getName());
	:}
    ;

MethodBody
	::= Block:rhs
	{: 
		RESULT = rhs; 
	:}
	;

ConstructorDeclaration
	::= Modifiers:m MethodDeclarator:md        Block:rhs
	{:
		   	AbstractNode newNode = makeConstructorNode(m.getName()+" "+md.getName());
		   	AbstractNode param = md.getChild();
		   	if (param != null){
		   		newNode.adoptChildren(param);
		   	}	
		   	md.orphan();
		   	newNode.adoptChildren(rhs);
			RESULT = newNode; 
	:}
	;

StaticInitializer
	::= STATIC Block:rhs
	{:
		RESULT = makeStaticNode("STATIC INITIALIZER");
		RESULT.adoptChildren(rhs); 
	:}
	;

/*
 * These can't be reorganized, because the order matters.
 * For example:  int i;  i = 5;  int j = i;
 */
Block
	::= LBRACE LocalVariableDeclarationsAndStatements:stmts RBRACE
	{: 
		RESULT = makeNode("BLOCK");
		RESULT.adoptChildren(stmts);
	:}
	|   LBRACE RBRACE
        ;

LocalVariableDeclarationsAndStatements
	::= LocalVariableDeclarationOrStatement:rhs
	{:
		RESULT = rhs;
	:}
	|   LocalVariableDeclarationsAndStatements:lvds 
	    LocalVariableDeclarationOrStatement:rhs
	{:
		RESULT = lvds;
		RESULT.makeSibling(rhs);
	:}
	;

LocalVariableDeclarationOrStatement
	::= LocalVariableDeclarationStatement:rhs
	{:  
		RESULT = rhs;
	:}	
	|   Statement:rhs
	{:
		RESULT = rhs;
	:}
	;

LocalVariableDeclarationStatement
	::= TypeSpecifier:t LocalVariableDeclarators:rhs SEMICOLON
	{:  
	   	RESULT =  makeFieldNode(t.getName());
	   	AbstractNode tmp = rhs.getFirst();
	   	AbstractNode tmpSib = tmp.getSib();
	   	AbstractNode newNode = makeFieldNode(t.getName()+" "+tmp.getName());
		while(tmpSib != null){
			tmp.orphan();
			AbstractNode newNextNode = makeFieldNode(t.getName()+" "+tmpSib.getName());			
			newNode.makeSibling(newNextNode);
			tmp = tmpSib;
			tmpSib = tmp.getSib();
		};
		RESULT.adoptChildren(newNode);
	:}
	|   ClassDeclaration:rhs                     /* Inner classes */
	{:  
		RESULT = rhs;
	:}	
	;

LocalVariableDeclarators
	::= LocalVariableDeclaratorName:v
	{:
		RESULT = v;
	:}
	|   LocalVariableDeclarators:fds COMMA LocalVariableDeclaratorName:v
	{:	
		fds.makeSibling(v);
		RESULT = v;
	:}
	;

Statement
	::= EmptyStatement:rhs
	{:
		RESULT = rhs;
	:}
	|   ExpressionStatement:rhs SEMICOLON
	{:
		RESULT = rhs;
	:}
    |   SelectionStatement:rhs
	{:
		RESULT = rhs;
	:}
    |   IterationStatement:rhs
	{:
		RESULT = rhs;
	:}
	|   ReturnStatement:rhs
	{:
		RESULT = rhs;
	:}
	|   Block:rhs
	{:
		RESULT = rhs;
	:}
	;

EmptyStatement
	::= SEMICOLON
        ;

ExpressionStatement
	::= Expression:rhs
	{:
		RESULT = rhs;
	:}
	;

/*
 *  You will eventually have to address the shift/reduce error that
 *     occurs when the second IF-rule is uncommented.
 *
 */

SelectionStatement
	::= IF LPAREN Expression:cond RPAREN Statement:rhs ELSE Statement:lhs
	{:
		RESULT = makeNode("If");
		AbstractNode predicate = makeNode("Predicate");
		AbstractNode consequent = makeNode("Consequent");
		AbstractNode alternative = makeNode("Alternative");
		RESULT.adoptChildren(predicate);
		RESULT.adoptChildren(consequent);
		RESULT.adoptChildren(alternative);
		predicate.adoptChildren(cond);
		consequent.adoptChildren(rhs);
		alternative.adoptChildren(lhs);

	:}
	|   IF LPAREN Expression:cond RPAREN Statement:rhs
	{:
		RESULT = makeNode("If");
		AbstractNode predicate = makeNode("Predicate");
		AbstractNode consequent = makeNode("Consequent");
		RESULT.adoptChildren(predicate);
		RESULT.adoptChildren(consequent);
		predicate.adoptChildren(cond);
		consequent.adoptChildren(rhs);
	:}
	
	;
/* 
 * Extra Credit:  FOR statement, DO statement
 */
IterationStatement
	::= WHILE LPAREN Expression:rhs RPAREN Statement:lhs
	{:
		RESULT = makeNode("While");
		RESULT.adoptChildren(rhs);
		RESULT.adoptChildren(lhs);
	:}
	;

ReturnStatement
	::= RETURN Expression:rhs SEMICOLON
	{:
		RESULT = makeNode("Return " + rhs.getName());
	:}
	|   RETURN            SEMICOLON
	{:
		RESULT = makeNode("Return");
	:}
	;

PrimaryExpression
	::= QualifiedName:t
	{: 
		RESULT = t;
	:}
	|   NotJustName:rhs
	{:
		RESULT = rhs;
	:}
/*
 *  You will eventually have to explain the conflicts that arise when the rule below
 *       is uncommented.
 *  This rule lets a block ( { .... }  ) serve anywhere a primary expression could.
 *  So you could write  a = { while (h>5) h = h -k; };

 	|   Block:rhs
	{:
		RESULT = rhs;
	:}
	 */
	;

NotJustName
	::= SpecialName:rhs
	{:
		RESULT = rhs;
	:}
	|   AllocationExpression:rhs
	{:
		RESULT = rhs;
	:}
	
	|   ComplexPrimary:rhs
	{:
		RESULT = rhs;
	:}
	;

ComplexPrimary
	::= LPAREN Expression:rhs RPAREN
	{:
		RESULT = rhs;
	:}
	|   ComplexPrimaryNoParenthesis:rhs
	{:
		RESULT = rhs;
	:}
	;

ComplexPrimaryNoParenthesis
	::= Literal:rhs
	{:
		RESULT = rhs;
	:}
	|   Number:rhs
	{:
		RESULT = rhs;
	:}
	|   FieldAccess:rhs
	{:
		RESULT = rhs;
	:}
	|   MethodCall:rhs
	{:
		RESULT = rhs;
	:}
	;

FieldAccess
	::= NotJustName:rhs PERIOD Identifier:id
	{:
		AbstractNode fieldAccess = makeNode("Field Access");
		fieldAccess.adoptChildren(id);
		RESULT = rhs;
		RESULT.adoptChildren(fieldAccess);
	:}
	;


MethodCall
	::= MethodReference:methref LPAREN ArgumentList:list RPAREN
	{:
		AbstractNode args = makeNode("Arguments");
		args.adoptChildren(list);
		AbstractNode method = makeNode("Method Call: " + methref.getName());
		method.adoptChildren(args);
		RESULT = method;
	:}
	|   MethodReference:methref LPAREN RPAREN
	{:
		RESULT = methref;
	:}
	;

MethodReference
	::= ComplexPrimaryNoParenthesis:rhs
	{:
		RESULT = rhs;
	:}
	|   QualifiedName:rhs
	{:
		RESULT = rhs;
	:}
	|  SpecialName:rhs
	{:
		RESULT = rhs;
	:}
	;

SpecialName
	::= THIS
	{:
		RESULT = makeNode("THIS");
	:}
	|   NULL
	{:
		RESULT = makeNode("NULL");
	:}
	|   SUPER
	{:
		RESULT = makeNode("SUPER");
	:}
	;

ArgumentList
	::= Expression:expr
	{:
		RESULT = expr;
	:}
	|   ArgumentList:list COMMA Expression:expr
	{:
		RESULT = list;
		list.makeSibling(expr);
	:}
	;

/*
 * Extra credit:  anonymous subclasses
 */
AllocationExpression
	::= NEW TypeName:tn LPAREN ArgumentList:list RPAREN
	{:
		RESULT = makeNode("NEW");
		AbstractNode args = makeNode("Arguments");
		args.adoptChildren(list);
		RESULT.adoptChildren(tn);
		RESULT.adoptChildren(args);
	:}
	|   NEW TypeName:tn LPAREN              RPAREN
	{:
		RESULT = makeNode("NEW");
		RESULT.adoptChildren(tn);
	:}
	;

/*
 * Extra credit, add post increment and decrement
 */
PostfixExpression
	::= PrimaryExpression:rhs
	{:
		RESULT = rhs;
	:}
	| PrimaryExpression:rhs UNARY_INC
	{:
		RESULT = makeAssignNode("Assign");
		/* Make a new node to reference rhs again */
		AbstractNode copyRightSide = makeNode(rhs.getName());
    	AbstractNode plusNode = makeAddNode("Plus");
    	AbstractNode one = makeNode("1");
    	RESULT.adoptChildren(rhs);
    	RESULT.adoptChildren(plusNode);
    	plusNode.adoptChildren(copyRightSide);
    	plusNode.adoptChildren(one);
	:}
	| PrimaryExpression:rhs UNARY_DEC
	{:
		RESULT = makeAssignNode("Assign");
		/* Make a new node to reference rhs again */
		AbstractNode copyRightSide = makeNode(rhs.getName());
		AbstractNode plusNode = makeMinusNode("Minus");
		AbstractNode one = makeNode("1");
		RESULT.adoptChildren(rhs);
		RESULT.adoptChildren(plusNode);
		plusNode.adoptChildren(copyRightSide);
		plusNode.adoptChildren(one);
	:}
        ;
        
Expression
	::= AssignmentExpression:rhs
	{:
		RESULT = rhs;
	:}
        ;

/*
 * Here we go.  Following are a bunch of rules to handle the right priority and
 * associativity of operators.  These rules can be treated fairly uniformly 
 * for now
 * However, be aware that down the road, you will want subclassees that 
 * can distinguish
 * the nodes by type, so that you can generate different code for 
 * plus vs. minus, for example.
 */

/*
 * What kind of associativity do we get for assignment expressions - why?
 */

AssignmentExpression
	::= ConditionalExpression:rhs
	{:
		RESULT = rhs;
		
	:}
	|   UnaryExpression:lhs AssignmentOperator:op AssignmentExpression:rhs
	{:
		if(op.getName().equals("Assign"))
		{
		RESULT = op;
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
		}
		else 
		{
			RESULT = makeAssignNode("Assign");
			/* Make a new node to reference lhs again */
			AbstractNode copyLeftSide = makeNode(lhs.getName());
			RESULT.adoptChildren(lhs);
			AbstractNode rightSide = makeAddNode("Plus");
			rightSide.adoptChildren(copyLeftSide);
			rightSide.adoptChildren(rhs);
			RESULT.adoptChildren(rightSide);
		}
	:}
	;

AssignmentOperator
	::= EQUALS:tok
	{:
		RESULT = makeAssignNode("Assign");
	:}
	|   ASS_ADD:tok   /* There are more of these if you're interested */
	{:
		RESULT = makeAssignNode("Add Assign");
	:}
	;

ConditionalExpression
	::= ConditionalOrExpression:rhs
	{:
		RESULT = rhs;
	:}
	|   ConditionalOrExpression:cond QUESTION Expression:cons COLON ConditionalExpression:alt
	{:
		/* Implement as an IF statement */
		RESULT = makeNode("If");
		AbstractNode predicate = makeNode("Predicate");
		AbstractNode consequent = makeNode("Consequent");
		AbstractNode alternative = makeNode("Alternative");
		predicate.adoptChildren(cond);
		consequent.adoptChildren(cons);
		alternative.adoptChildren(alt);
		RESULT.adoptChildren(predicate);
		RESULT.adoptChildren(consequent);
		RESULT.adoptChildren(alternative);
	:}
	;

ConditionalOrExpression
	::= ConditionalAndExpression:rhs
	{:
		RESULT = rhs;
	:}
	|   ConditionalOrExpression:left OP_LOR:op ConditionalAndExpression:right   /* short-circuit OR */
	{:
		/* FIXME: Conditional logic should short circuit. Find a way to do this */
		RESULT = makeAssignNode("OR");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
	;

ConditionalAndExpression
	::= InclusiveOrExpression:rhs
	{:
		RESULT = rhs;
	:}
	|   ConditionalAndExpression:left OP_LAND:op InclusiveOrExpression:right   /* short-circuit AND */
	{:
		/* FIXME: Conditional logic should short circuit. Find a way to do this */
		RESULT = makeAssignNode("AND");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
	;

InclusiveOrExpression
	::= ExclusiveOrExpression:rhs
	{:
		RESULT = rhs;
	:}
	|   InclusiveOrExpression:left PIPE:op ExclusiveOrExpression:right
	{:
		RESULT = makeAssignNode("OR");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
	;

ExclusiveOrExpression
	::= AndExpression:rhs
	{:
		RESULT = rhs;
	:}
	|   ExclusiveOrExpression:left HAT:op AndExpression:right
	{:
		RESULT = makeAssignNode("XOR");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
	;

AndExpression
	::= EqualityExpression:rhs
	{:
		RESULT = rhs;
	:}
    |   AndExpression:left AND:op EqualityExpression:right
	{:
		RESULT = makeAssignNode("AND");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
    ;

EqualityExpression
	::= RelationalExpression:rhs
	{:
		RESULT = rhs;
	:}
    |   EqualityExpression:left OP_EQ:op RelationalExpression:right
	{:
		RESULT = makeNode("EQUAL");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
    |   EqualityExpression:left OP_NE:op RelationalExpression:right
	{:
		RESULT = makeNode("NOT EQUAL");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
    ;
 
RelationalExpression
	::= ShiftExpression:rhs
	{:
		RESULT = rhs;
	:}
    |   RelationalExpression:left OP_GT:op    ShiftExpression:right
	{:
		RESULT = makeNode(">");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
	|   RelationalExpression:left OP_LT:op    ShiftExpression:right
	{:
		RESULT = makeNode("<");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
	|   RelationalExpression:left OP_LE:op      ShiftExpression:right
	{:
		RESULT = makeNode("<=");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
	|   RelationalExpression:left OP_GE:op      ShiftExpression:right
	{:
		RESULT = makeNode(">=");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
	|   RelationalExpression:left INSTANCEOF:op TypeSpecifier:right
	{:
		RESULT = makeNode("instanceof");
		RESULT.adoptChildren(left);
		RESULT.adoptChildren(right);
	:}
	;

/*
 * Extra credit:  shift expressions
 */
ShiftExpression
	::= AdditiveExpression:rhs
	{:
		RESULT = rhs;
	:}
	;

AdditiveExpression
	::= MultiplicativeExpression:rhs
	{:
		RESULT = rhs;
	:}
    |   AdditiveExpression:lhs PLUSOP:op MultiplicativeExpression:rhs
	{:
		RESULT = makeAddNode("Plus");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	:}
	|   AdditiveExpression:lhs MINUSOP:op MultiplicativeExpression:rhs
	{:
		RESULT = makeMinusNode("Minus");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	:}
        ;

MultiplicativeExpression
	::= CastExpression:rhs
	{:
		RESULT = rhs;
	:}
	|   MultiplicativeExpression:lhs ASTERICK:op CastExpression:rhs
	{:
		RESULT = makeNode("Times");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	:}
	|   MultiplicativeExpression:lhs RSLASH:op CastExpression:rhs
	{:
		RESULT = makeNode("Divided By");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	:}
	|   MultiplicativeExpression:lhs PERCENT:op CastExpression:rhs	/* remainder */
	{:
		RESULT = makeNode("Modulo");
		RESULT.adoptChildren(lhs);
		RESULT.adoptChildren(rhs);
	:}
	;

/*
 * Be sure to introduce an explicit cast operator
 */
CastExpression
	::= UnaryExpression:rhs						/* no cast */
	{:
		RESULT = rhs;
	:}
    |   LPAREN PrimitiveType:s RPAREN CastExpression:lue		/* More casts coming */
	{:
		RESULT = makeNode("Cast");
    	RESULT.adoptChildren(s);
    	RESULT.adoptChildren(lue);
	:}
	|   LPAREN Expression:exp RPAREN LogicalUnaryExpression:lue	/* Final cast */
	{:
		RESULT = makeNode("Final Cast");
    	RESULT.adoptChildren(exp);
    	RESULT.adoptChildren(lue);
	:}
	;

/*
 * Extra credit:  pre-increment and pre-decrement
 */
UnaryExpression
	::= LogicalUnaryExpression:rhs
	{:
		RESULT = rhs;
	:}
	|   ArithmeticUnaryOperator:op CastExpression:exp
	{:
		RESULT = op;
		RESULT.adoptChildren(exp);
	:}
	|   UNARY_INC LogicalUnaryExpression:rhs
	{:
		RESULT = makeAssignNode("Assign");
		/* Make a new node to reference rhs again */
		AbstractNode copyRightSide = makeNode(rhs.getName());
    	AbstractNode plusNode = makeAddNode("Plus");
    	AbstractNode one = makeNode("1");
    	RESULT.adoptChildren(rhs);
    	RESULT.adoptChildren(plusNode);
    	plusNode.adoptChildren(copyRightSide);
    	plusNode.adoptChildren(one);
	:}
	|   UNARY_DEC LogicalUnaryExpression:rhs
	{:
		RESULT = makeAssignNode("Assign");
		/* Make a new node to reference rhs again */
		AbstractNode copyRightSide = makeNode(rhs.getName());
		AbstractNode plusNode = makeMinusNode("Minus");
		AbstractNode one = makeNode("1");
		RESULT.adoptChildren(rhs);
		RESULT.adoptChildren(plusNode);
		plusNode.adoptChildren(copyRightSide);
		plusNode.adoptChildren(one);
	:}
	;

ArithmeticUnaryOperator
	::= PLUSOP:rhs
	{:
		RESULT = makeNode("UnaryPlus");
	:}
	|   MINUSOP:rhs
	{:
		RESULT = makeNode("UnaryMinus");
	:}
	;

LogicalUnaryExpression
	::= PostfixExpression:rhs
	{:
		RESULT = rhs;
	:}
	|   LogicalUnaryOperator:op UnaryExpression:uexp
	{:
		RESULT = op;
		RESULT.adoptChildren(uexp);
	:}
	;

LogicalUnaryOperator
	::= BANG:rhs
	{:
		RESULT = makeNode("!");
	:}
	|  TILDE:rhs
	{:
		RESULT = makeNode("~");
	:}
	;

Identifier
	::= IDENTIFIER:id
	{: 
		RESULT = makeNode(id); 
	:}
	;

Literal
	::= LITERAL:lit
	{: 
		RESULT = makeNode(lit); 
	:}
	;

Number
	::= INTNUMBER:n
	{: 
		RESULT = makeNode(n); 
	:}
	;