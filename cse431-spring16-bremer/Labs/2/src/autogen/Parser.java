
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 22 12:55:37 CST 2016
//----------------------------------------------------

package autogen;

import java_cup.runtime.*;
import lab2.IntPair;
import common.Listing;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 22 12:55:37 CST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\007\003\000\002\010\003\000\002\012" +
    "\003\000\002\013\004\000\002\013\003\000\002\011\003" +
    "\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\004\014\010\001\002\000\004\002\044\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufffd\014\ufffd" +
    "\001\002\000\006\002\uffff\014\010\001\002\000\020\005" +
    "\020\006\014\007\012\010\015\011\017\012\016\013\011" +
    "\001\002\000\006\004\024\014\010\001\002\000\006\004" +
    "\024\014\010\001\002\000\004\015\040\001\002\000\006" +
    "\004\024\014\010\001\002\000\006\004\024\014\010\001" +
    "\002\000\006\004\024\014\010\001\002\000\006\004\024" +
    "\014\010\001\002\000\006\004\024\014\010\001\002\000" +
    "\006\004\ufff4\014\ufff4\001\002\000\006\004\024\014\010" +
    "\001\002\000\010\004\uffef\014\uffef\015\uffef\001\002\000" +
    "\010\004\uffee\014\uffee\015\uffee\001\002\000\004\015\ufff3" +
    "\001\002\000\004\015\ufffb\001\002\000\006\004\024\014" +
    "\010\001\002\000\004\015\ufff9\001\002\000\010\004\ufff2" +
    "\014\ufff2\015\ufff2\001\002\000\004\015\ufff8\001\002\000" +
    "\010\004\024\014\010\015\ufff6\001\002\000\010\004\ufff0" +
    "\014\ufff0\015\ufff0\001\002\000\010\004\ufff1\014\ufff1\015" +
    "\ufff1\001\002\000\006\004\024\014\010\001\002\000\004" +
    "\015\ufffa\001\002\000\012\002\ufffc\004\ufffc\014\ufffc\015" +
    "\ufffc\001\002\000\010\004\024\014\010\015\ufff7\001\002" +
    "\000\010\004\024\014\010\015\ufff5\001\002\000\006\002" +
    "\ufffe\014\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\012\002\003\003\004\004\006\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\042\001\001\000\004\006\012\001\001\000" +
    "\012\005\022\011\030\012\033\013\041\001\001\000\012" +
    "\005\022\011\030\012\033\013\040\001\001\000\002\001" +
    "\001\000\010\005\022\007\035\011\020\001\001\000\012" +
    "\005\022\011\030\012\033\013\032\001\001\000\010\005" +
    "\022\011\030\012\031\001\001\000\010\005\022\007\026" +
    "\011\020\001\001\000\010\005\022\007\021\011\020\001" +
    "\001\000\002\001\001\000\010\005\022\010\025\011\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\022\010\027\011\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\022\011\030\012\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\022\010\036\011" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\022\011\030\012\034\001\001\000\010\005\022\011" +
    "\030\012\034\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Atom ::= number 
            {
              Integer RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer nu = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nu; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atom",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Atom ::= List 
            {
              Integer RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer L = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = L; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atom",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Operands ::= Operand 
            {
              Integer RESULT =null;
		int Opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer Op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operands",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Operands ::= Operands Operand 
            {
              Integer RESULT =null;
		int Opsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Opsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer Ops = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer Op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operands",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Operand ::= Atom 
            {
              Integer RESULT =null;
		int Atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer At = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Operand2 ::= Atom 
            {
              Integer RESULT =null;
		int Atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer At = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Operand1 ::= Atom 
            {
              Integer RESULT =null;
		int Atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer At = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expression ::= mean Operands 
            {
              Integer RESULT =null;
		int MOsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int MOsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer MOs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expression ::= product Operands 
            {
              Integer RESULT =null;
		int POsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int POsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer POs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expression ::= sum Operands 
            {
              Integer RESULT =null;
		int SOsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int SOsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer SOs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expression ::= negate Operand 
            {
              Integer RESULT =null;
		int Opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer Op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression ::= times Operand1 Operand2 
            {
              Integer RESULT =null;
		int Op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer Op1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer Op2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expression ::= minus Operand1 Operand2 
            {
              Integer RESULT =null;
		int Op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer Op1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer Op2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expression ::= plus Operand1 Operand2 
            {
              Integer RESULT =null;
		int Op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer Op1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer Op2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // List ::= lparen Expression rparen 
            {
              Integer RESULT =null;
		int Exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer Ex = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("List",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lists ::= List 
            {
              Integer RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer L = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Listing.get().EmitMessage("Value: " + L.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lists",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lists ::= Lists List 
            {
              Integer RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer L = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Listing.get().EmitMessage("Value: " + L.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lists",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // File ::= Lists 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("File",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= File 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

